/* eslint-disable no-console */
/**
 * (C) Copyright IBM Corp. 2021.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';
const VulnerabilityAdvisorV3 = require('../../dist/vulnerability-advisor/v3');
const authHelper = require('../resources/auth-helper.js');
const utilf = require('util');

// testcase timeout value (200s).
const timeout = 200000;

// Location of our config file.
const configFile = 'vulnerability_advisor_v3.env';

const describe = authHelper.prepareTests(configFile);

describe('VulnerabilityAdvisorV3_integration', () => {
  const vaOptions = authHelper.loadConfig();
  const configAccount = vaOptions.VULNERABILITY_ADVISOR_ACCOUNT_ID;
  const configSeedImage = vaOptions.VULNERABILITY_ADVISOR_SEED_IMAGE;
  const configRegistryDNSName = vaOptions.VULNERABILITY_ADVISOR_URL.replace('https://', '');

  const vulnerabilityAdvisorService = VulnerabilityAdvisorV3.newInstance({
    account: configAccount,
  });

  expect(vulnerabilityAdvisorService).not.toBeNull();

  jest.setTimeout(timeout);

  test('accountReportQueryPath()', async () => {
    const params = {
      includePrivate: 'true',
    };

    const res = await vulnerabilityAdvisorService.accountReportQueryPath(params);
    expect(res).toBeDefined();
    expect(res.result).toBeDefined();
  });
  test('accountStatusQueryPath()', async () => {
    const params = {
      includePrivate: 'true',
    };

    const res = await vulnerabilityAdvisorService.accountStatusQueryPath(params);
    expect(res).toBeDefined();
    expect(res.result).toBeDefined();
  });
  test('imageStatusQueryPath()', async () => {
    const params = {
      name: utilf.format('%s/%s', configRegistryDNSName, configSeedImage),
    };

    const res = await vulnerabilityAdvisorService.imageStatusQueryPath(params);
    expect(res).toBeDefined();
    expect(res.result).toBeDefined();
  });
  test('imageReportQueryPath()', async () => {
    const params = {
      name: utilf.format('%s/%s', configRegistryDNSName, configSeedImage),
    };

    const res = await vulnerabilityAdvisorService.imageReportQueryPath(params);
    expect(res).toBeDefined();
    expect(res.result).toBeDefined();
  });
  test('createExemptionAccount()', async () => {
    const params = {
      issueType: 'cve',
      issueId: 'CVE-2020-0001',
    };

    const res = await vulnerabilityAdvisorService.createExemptionAccount(params);
    expect(res).toBeDefined();
    expect(res.result).toBeDefined();
  });
  test('listExemptionAccount()', async () => {
    const res = await vulnerabilityAdvisorService.listExemptionAccount();
    expect(res).toBeDefined();
    expect(res.result).toBeDefined();
  });
  test('getExemptionAccount()', async () => {
    const params = {
      issueType: 'cve',
      issueId: 'CVE-2020-0001',
    };

    const res = await vulnerabilityAdvisorService.getExemptionAccount(params);
    expect(res).toBeDefined();
    expect(res.result).toBeDefined();
  });
  test('deleteExemptionAccount()', async () => {
    const params = {
      issueType: 'cve',
      issueId: 'CVE-2020-0001',
    };

    const res = await vulnerabilityAdvisorService.deleteExemptionAccount(params);
    expect(res).toBeDefined();
    expect(res.result).toBeDefined();
  });
  test('createExemptionResource()', async () => {
    const params = {
      resource: utilf.format('%s/%s', configRegistryDNSName, configSeedImage),
      issueType: 'cve',
      issueId: 'CVE-2020-0001',
    };

    const res = await vulnerabilityAdvisorService.createExemptionResource(params);
    expect(res).toBeDefined();
    expect(res.result).toBeDefined();
  });
  test('listExemptionResource()', async () => {
    const params = {
      resource: utilf.format('%s/%s', configRegistryDNSName, configSeedImage),
    };

    const res = await vulnerabilityAdvisorService.listExemptionResource(params);
    expect(res).toBeDefined();
    expect(res.result).toBeDefined();
  });
  test('listImageExemptions()', async () => {
    const params = {
      resource: utilf.format('%s/%s', configRegistryDNSName, configSeedImage),
      includeScope: true,
    };

    const res = await vulnerabilityAdvisorService.listImageExemptions(params);
    expect(res).toBeDefined();
    expect(res.result).toBeDefined();
  });
  test('listBulkImageExemptions()', async () => {
    const params = {
      body: [utilf.format('%s/%s', configRegistryDNSName, configSeedImage)],
    };

    const res = await vulnerabilityAdvisorService.listBulkImageExemptions(params);
    expect(res).toBeDefined();
    expect(res.result).toBeDefined();
  });
  test('listAccountExemptions()', async () => {
    const res = await vulnerabilityAdvisorService.listAccountExemptions();
    expect(res).toBeDefined();
    expect(res.result).toBeDefined();
  });
  test('getExemptionResource()', async () => {
    const params = {
      resource: utilf.format('%s/%s', configRegistryDNSName, configSeedImage),
      issueType: 'cve',
      issueId: 'CVE-2020-0001',
    };

    const res = await vulnerabilityAdvisorService.getExemptionResource(params);
    expect(res).toBeDefined();
    expect(res.result).toBeDefined();
  });
  test('deleteExemptionResource()', async () => {
    const params = {
      resource: utilf.format('%s/%s', configRegistryDNSName, configSeedImage),
      issueType: 'cve',
      issueId: 'CVE-2020-0001',
    };

    const res = await vulnerabilityAdvisorService.deleteExemptionResource(params);
    expect(res).toBeDefined();
    expect(res.result).toBeDefined();
  });
  test('exemptHandler()', async () => {
    const res = await vulnerabilityAdvisorService.exemptHandler();
    expect(res).toBeDefined();
    expect(res.result).toBeDefined();
  });
  test('exemptionsAccountDeleteHandler()', async () => {
    const res = await vulnerabilityAdvisorService.exemptionsAccountDeleteHandler();
    expect(res).toBeDefined();
    expect(res.result).toBeDefined();
  });
});
