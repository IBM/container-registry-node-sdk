/**
 * (C) Copyright IBM Corp. 2023.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

// need to import the whole package to mock getAuthenticatorFromEnvironment
const sdkCorePackage = require('ibm-cloud-sdk-core');

const { NoAuthAuthenticator, unitTestUtils } = sdkCorePackage;

const VulnerabilityAdvisorV4 = require('../../dist/vulnerability-advisor/v4');

const {
  getOptions,
  checkUrlAndMethod,
  checkMediaHeaders,
  expectToBePromise,
  checkUserHeader,
  checkForSuccessfulExecution,
} = unitTestUtils;

const vulnerabilityAdvisorServiceOptions = {
  authenticator: new NoAuthAuthenticator(),
  url: 'https://icr.io',
  acceptLanguage: 'en_US',
  account: 'accountID',
};

const vulnerabilityAdvisorService = new VulnerabilityAdvisorV4(vulnerabilityAdvisorServiceOptions);

let createRequestMock = null;
function mock_createRequest() {
  if (!createRequestMock) {
    createRequestMock = jest.spyOn(vulnerabilityAdvisorService, 'createRequest');
    createRequestMock.mockImplementation(() => Promise.resolve());
  }
}

// dont actually construct an authenticator
const getAuthenticatorMock = jest.spyOn(sdkCorePackage, 'getAuthenticatorFromEnvironment');
getAuthenticatorMock.mockImplementation(() => new NoAuthAuthenticator());

// used for the service construction tests
let requiredGlobals;

describe('VulnerabilityAdvisorV4', () => {

  afterEach(() => {
    if (createRequestMock) {
      createRequestMock.mockClear();
    }
    getAuthenticatorMock.mockClear();
  });

  beforeEach(() => {
    mock_createRequest();
    // these are changed when passed into the factory/constructor, so re-init
    requiredGlobals = {
      account: 'testString',
    };
  });

  describe('the newInstance method', () => {
    test('should use defaults when options not provided', () => {
      const testInstance = VulnerabilityAdvisorV4.newInstance(requiredGlobals);

      expect(getAuthenticatorMock).toHaveBeenCalled();
      expect(testInstance.baseOptions.authenticator).toBeInstanceOf(NoAuthAuthenticator);
      expect(testInstance.baseOptions.serviceName).toBe(VulnerabilityAdvisorV4.DEFAULT_SERVICE_NAME);
      expect(testInstance.baseOptions.serviceUrl).toBe(VulnerabilityAdvisorV4.DEFAULT_SERVICE_URL);
      expect(testInstance).toBeInstanceOf(VulnerabilityAdvisorV4);
    });

    test('should set serviceName, serviceUrl, and authenticator when provided', () => {
      let options = {
        authenticator: new NoAuthAuthenticator(),
        serviceUrl: 'custom.com',
        serviceName: 'my-service',
      };

      options = Object.assign(options, requiredGlobals);

      const testInstance = VulnerabilityAdvisorV4.newInstance(options);

      expect(getAuthenticatorMock).not.toHaveBeenCalled();
      expect(testInstance.baseOptions.authenticator).toBeInstanceOf(NoAuthAuthenticator);
      expect(testInstance.baseOptions.serviceUrl).toBe('custom.com');
      expect(testInstance.baseOptions.serviceName).toBe('my-service');
      expect(testInstance).toBeInstanceOf(VulnerabilityAdvisorV4);
    });
  });

  describe('the constructor', () => {
    test('use user-given service url', () => {
      let options = {
        authenticator: new NoAuthAuthenticator(),
        serviceUrl: 'custom.com',
      };

      options = Object.assign(options, requiredGlobals);

      const testInstance = new VulnerabilityAdvisorV4(options);

      expect(testInstance.baseOptions.serviceUrl).toBe('custom.com');
    });

    test('use default service url', () => {
      let options = {
        authenticator: new NoAuthAuthenticator(),
      };

      options = Object.assign(options, requiredGlobals);

      const testInstance = new VulnerabilityAdvisorV4(options);

      expect(testInstance.baseOptions.serviceUrl).toBe(VulnerabilityAdvisorV4.DEFAULT_SERVICE_URL);
    });
  });

  describe('service-level tests', () => {
    describe('positive tests', () => {
      test('construct service with global params', () => {
        const serviceObj = new VulnerabilityAdvisorV4(vulnerabilityAdvisorServiceOptions);
        expect(serviceObj).not.toBeNull();
        expect(serviceObj.acceptLanguage).toEqual(vulnerabilityAdvisorServiceOptions.acceptLanguage);
        expect(serviceObj.account).toEqual(vulnerabilityAdvisorServiceOptions.account);
      });
    });
  });

  describe('getServiceUrlForRegion', () => {
    test('should return undefined for invalid region', () => {
      expect(VulnerabilityAdvisorV4.getServiceUrlForRegion('INVALID_REGION')).toBeFalsy();
    });
    test('should return valid service url', () => {
      expect(VulnerabilityAdvisorV4.getServiceUrlForRegion('global')).toBe('https://icr.io');      
      expect(VulnerabilityAdvisorV4.getServiceUrlForRegion('us-south')).toBe('https://us.icr.io');      
      expect(VulnerabilityAdvisorV4.getServiceUrlForRegion('uk-south')).toBe('https://uk.icr.io');      
      expect(VulnerabilityAdvisorV4.getServiceUrlForRegion('eu-gb')).toBe('https://uk.icr.io');      
      expect(VulnerabilityAdvisorV4.getServiceUrlForRegion('eu-central')).toBe('https://de.icr.io');      
      expect(VulnerabilityAdvisorV4.getServiceUrlForRegion('eu-de')).toBe('https://de.icr.io');      
      expect(VulnerabilityAdvisorV4.getServiceUrlForRegion('ap-north')).toBe('https://jp.icr.io');      
      expect(VulnerabilityAdvisorV4.getServiceUrlForRegion('jp-tok')).toBe('https://jp.icr.io');      
      expect(VulnerabilityAdvisorV4.getServiceUrlForRegion('ap-south')).toBe('https://au.icr.io');      
      expect(VulnerabilityAdvisorV4.getServiceUrlForRegion('au-syd')).toBe('https://au.icr.io');      
      expect(VulnerabilityAdvisorV4.getServiceUrlForRegion('jp-osa')).toBe('https://jp2.icr.io');      
      expect(VulnerabilityAdvisorV4.getServiceUrlForRegion('ca-tor')).toBe('https://ca.icr.io');      
      expect(VulnerabilityAdvisorV4.getServiceUrlForRegion('br-sao')).toBe('https://br.icr.io');      
    });
  });

  describe('accountReportQueryPath', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest with enable and disable retries', () => {
        // Construct the params object for operation accountReportQueryPath
        const repository = 'myRepository';
        const includeIbm = 'false';
        const includePrivate = 'true';
        const accountReportQueryPathParams = {
          repository,
          includeIbm,
          includePrivate,
        };

        const accountReportQueryPathResult = vulnerabilityAdvisorService.accountReportQueryPath(accountReportQueryPathParams);

        // all methods should return a Promise
        expectToBePromise(accountReportQueryPathResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const mockRequestOptions = getOptions(createRequestMock);

        checkUrlAndMethod(mockRequestOptions, '/va/api/v4/report/account', 'GET');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', vulnerabilityAdvisorServiceOptions.account);
        checkUserHeader(createRequestMock, 'Accept-Language', vulnerabilityAdvisorServiceOptions.acceptLanguage);
        expect(mockRequestOptions.qs.repository).toEqual(repository);
        expect(mockRequestOptions.qs.includeIBM).toEqual(includeIbm);
        expect(mockRequestOptions.qs.includePrivate).toEqual(includePrivate);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const accountReportQueryPathParams = {
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.accountReportQueryPath(accountReportQueryPathParams);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });

      test('should not have any problems when no parameters are passed in', () => {
        // invoke the method with no parameters
        vulnerabilityAdvisorService.accountReportQueryPath({});
        checkForSuccessfulExecution(createRequestMock);
      });
    });
  });

  describe('accountStatusQueryPath', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation accountStatusQueryPath
        const repository = 'testString';
        const includeIbm = 'testString';
        const includePrivate = 'testString';
        const accountStatusQueryPathParams = {
          repository,
          includeIbm,
          includePrivate,
        };

        const accountStatusQueryPathResult = vulnerabilityAdvisorService.accountStatusQueryPath(accountStatusQueryPathParams);

        // all methods should return a Promise
        expectToBePromise(accountStatusQueryPathResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const mockRequestOptions = getOptions(createRequestMock);

        checkUrlAndMethod(mockRequestOptions, '/va/api/v4/report/account/status', 'GET');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', vulnerabilityAdvisorServiceOptions.account);
        checkUserHeader(createRequestMock, 'Accept-Language', vulnerabilityAdvisorServiceOptions.acceptLanguage);
        expect(mockRequestOptions.qs.repository).toEqual(repository);
        expect(mockRequestOptions.qs.includeIBM).toEqual(includeIbm);
        expect(mockRequestOptions.qs.includePrivate).toEqual(includePrivate);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const accountStatusQueryPathParams = {
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.accountStatusQueryPath(accountStatusQueryPathParams);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });

      test('should not have any problems when no parameters are passed in', () => {
        // invoke the method with no parameters
        vulnerabilityAdvisorService.accountStatusQueryPath({});
        checkForSuccessfulExecution(createRequestMock);
      });
    });
  });

  describe('imageReportQueryPath', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation imageReportQueryPath
        const name = 'testString';
        const imageReportQueryPathParams = {
          name,
        };

        const imageReportQueryPathResult = vulnerabilityAdvisorService.imageReportQueryPath(imageReportQueryPathParams);

        // all methods should return a Promise
        expectToBePromise(imageReportQueryPathResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const mockRequestOptions = getOptions(createRequestMock);

        checkUrlAndMethod(mockRequestOptions, '/va/api/v4/report/image/{name}', 'GET');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', vulnerabilityAdvisorServiceOptions.account);
        checkUserHeader(createRequestMock, 'Accept-Language', vulnerabilityAdvisorServiceOptions.acceptLanguage);
        expect(mockRequestOptions.path.name).toEqual(name);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const name = 'testString';
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const imageReportQueryPathParams = {
          name,
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.imageReportQueryPath(imageReportQueryPathParams);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });
    });

    describe('negative tests', () => {
      test('should enforce required parameters', async () => {
        let err;
        try {
          await vulnerabilityAdvisorService.imageReportQueryPath({});
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
      });

      test('should reject promise when required params are not given', async () => {
        let err;
        try {
          await vulnerabilityAdvisorService.imageReportQueryPath();
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
      });
    });
  });

  describe('imageStatusQueryPath', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation imageStatusQueryPath
        const name = 'testString';
        const imageStatusQueryPathParams = {
          name,
        };

        const imageStatusQueryPathResult = vulnerabilityAdvisorService.imageStatusQueryPath(imageStatusQueryPathParams);

        // all methods should return a Promise
        expectToBePromise(imageStatusQueryPathResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const mockRequestOptions = getOptions(createRequestMock);

        checkUrlAndMethod(mockRequestOptions, '/va/api/v4/report/image/status/{name}', 'GET');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', vulnerabilityAdvisorServiceOptions.account);
        checkUserHeader(createRequestMock, 'Accept-Language', vulnerabilityAdvisorServiceOptions.acceptLanguage);
        expect(mockRequestOptions.path.name).toEqual(name);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const name = 'testString';
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const imageStatusQueryPathParams = {
          name,
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.imageStatusQueryPath(imageStatusQueryPathParams);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });
    });

    describe('negative tests', () => {
      test('should enforce required parameters', async () => {
        let err;
        try {
          await vulnerabilityAdvisorService.imageStatusQueryPath({});
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
      });

      test('should reject promise when required params are not given', async () => {
        let err;
        try {
          await vulnerabilityAdvisorService.imageStatusQueryPath();
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
      });
    });
  });

  describe('listExemptionAccount', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation listExemptionAccount
        const listExemptionAccountParams = {};

        const listExemptionAccountResult = vulnerabilityAdvisorService.listExemptionAccount(listExemptionAccountParams);

        // all methods should return a Promise
        expectToBePromise(listExemptionAccountResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const mockRequestOptions = getOptions(createRequestMock);

        checkUrlAndMethod(mockRequestOptions, '/va/api/v4/exempt/image', 'GET');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', vulnerabilityAdvisorServiceOptions.account);
        checkUserHeader(createRequestMock, 'Accept-Language', vulnerabilityAdvisorServiceOptions.acceptLanguage);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const listExemptionAccountParams = {
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.listExemptionAccount(listExemptionAccountParams);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });

      test('should not have any problems when no parameters are passed in', () => {
        // invoke the method with no parameters
        vulnerabilityAdvisorService.listExemptionAccount({});
        checkForSuccessfulExecution(createRequestMock);
      });
    });
  });

  describe('getExemptionAccount', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation getExemptionAccount
        const issueType = 'testString';
        const issueId = 'testString';
        const getExemptionAccountParams = {
          issueType,
          issueId,
        };

        const getExemptionAccountResult = vulnerabilityAdvisorService.getExemptionAccount(getExemptionAccountParams);

        // all methods should return a Promise
        expectToBePromise(getExemptionAccountResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const mockRequestOptions = getOptions(createRequestMock);

        checkUrlAndMethod(mockRequestOptions, '/va/api/v4/exempt/image/issue/{issueType}/{issueID}', 'GET');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', vulnerabilityAdvisorServiceOptions.account);
        checkUserHeader(createRequestMock, 'Accept-Language', vulnerabilityAdvisorServiceOptions.acceptLanguage);
        expect(mockRequestOptions.path.issueType).toEqual(issueType);
        expect(mockRequestOptions.path.issueID).toEqual(issueId);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const issueType = 'testString';
        const issueId = 'testString';
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const getExemptionAccountParams = {
          issueType,
          issueId,
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.getExemptionAccount(getExemptionAccountParams);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });
    });

    describe('negative tests', () => {
      test('should enforce required parameters', async () => {
        let err;
        try {
          await vulnerabilityAdvisorService.getExemptionAccount({});
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
      });

      test('should reject promise when required params are not given', async () => {
        let err;
        try {
          await vulnerabilityAdvisorService.getExemptionAccount();
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
      });
    });
  });

  describe('createExemptionAccount', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation createExemptionAccount
        const issueType = 'testString';
        const issueId = 'testString';
        const createExemptionAccountParams = {
          issueType,
          issueId,
        };

        const createExemptionAccountResult = vulnerabilityAdvisorService.createExemptionAccount(createExemptionAccountParams);

        // all methods should return a Promise
        expectToBePromise(createExemptionAccountResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const mockRequestOptions = getOptions(createRequestMock);

        checkUrlAndMethod(mockRequestOptions, '/va/api/v4/exempt/image/issue/{issueType}/{issueID}', 'POST');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', vulnerabilityAdvisorServiceOptions.account);
        checkUserHeader(createRequestMock, 'Accept-Language', vulnerabilityAdvisorServiceOptions.acceptLanguage);
        expect(mockRequestOptions.path.issueType).toEqual(issueType);
        expect(mockRequestOptions.path.issueID).toEqual(issueId);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const issueType = 'testString';
        const issueId = 'testString';
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const createExemptionAccountParams = {
          issueType,
          issueId,
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.createExemptionAccount(createExemptionAccountParams);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });
    });

    describe('negative tests', () => {
      test('should enforce required parameters', async () => {
        let err;
        try {
          await vulnerabilityAdvisorService.createExemptionAccount({});
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
      });

      test('should reject promise when required params are not given', async () => {
        let err;
        try {
          await vulnerabilityAdvisorService.createExemptionAccount();
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
      });
    });
  });

  describe('deleteExemptionAccount', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation deleteExemptionAccount
        const issueType = 'testString';
        const issueId = 'testString';
        const deleteExemptionAccountParams = {
          issueType,
          issueId,
        };

        const deleteExemptionAccountResult = vulnerabilityAdvisorService.deleteExemptionAccount(deleteExemptionAccountParams);

        // all methods should return a Promise
        expectToBePromise(deleteExemptionAccountResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const mockRequestOptions = getOptions(createRequestMock);

        checkUrlAndMethod(mockRequestOptions, '/va/api/v4/exempt/image/issue/{issueType}/{issueID}', 'DELETE');
        const expectedAccept = undefined;
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', vulnerabilityAdvisorServiceOptions.account);
        checkUserHeader(createRequestMock, 'Accept-Language', vulnerabilityAdvisorServiceOptions.acceptLanguage);
        expect(mockRequestOptions.path.issueType).toEqual(issueType);
        expect(mockRequestOptions.path.issueID).toEqual(issueId);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const issueType = 'testString';
        const issueId = 'testString';
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const deleteExemptionAccountParams = {
          issueType,
          issueId,
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.deleteExemptionAccount(deleteExemptionAccountParams);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });
    });

    describe('negative tests', () => {
      test('should enforce required parameters', async () => {
        let err;
        try {
          await vulnerabilityAdvisorService.deleteExemptionAccount({});
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
      });

      test('should reject promise when required params are not given', async () => {
        let err;
        try {
          await vulnerabilityAdvisorService.deleteExemptionAccount();
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
      });
    });
  });

  describe('listExemptionResource', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation listExemptionResource
        const resource = 'testString';
        const listExemptionResourceParams = {
          resource,
        };

        const listExemptionResourceResult = vulnerabilityAdvisorService.listExemptionResource(listExemptionResourceParams);

        // all methods should return a Promise
        expectToBePromise(listExemptionResourceResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const mockRequestOptions = getOptions(createRequestMock);

        checkUrlAndMethod(mockRequestOptions, '/va/api/v4/exempt/image/{resource}', 'GET');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', vulnerabilityAdvisorServiceOptions.account);
        checkUserHeader(createRequestMock, 'Accept-Language', vulnerabilityAdvisorServiceOptions.acceptLanguage);
        expect(mockRequestOptions.path.resource).toEqual(resource);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const resource = 'testString';
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const listExemptionResourceParams = {
          resource,
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.listExemptionResource(listExemptionResourceParams);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });
    });

    describe('negative tests', () => {
      test('should enforce required parameters', async () => {
        let err;
        try {
          await vulnerabilityAdvisorService.listExemptionResource({});
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
      });

      test('should reject promise when required params are not given', async () => {
        let err;
        try {
          await vulnerabilityAdvisorService.listExemptionResource();
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
      });
    });
  });

  describe('getExemptionResource', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation getExemptionResource
        const resource = 'testString';
        const issueType = 'testString';
        const issueId = 'testString';
        const getExemptionResourceParams = {
          resource,
          issueType,
          issueId,
        };

        const getExemptionResourceResult = vulnerabilityAdvisorService.getExemptionResource(getExemptionResourceParams);

        // all methods should return a Promise
        expectToBePromise(getExemptionResourceResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const mockRequestOptions = getOptions(createRequestMock);

        checkUrlAndMethod(mockRequestOptions, '/va/api/v4/exempt/image/{resource}/issue/{issueType}/{issueID}', 'GET');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', vulnerabilityAdvisorServiceOptions.account);
        checkUserHeader(createRequestMock, 'Accept-Language', vulnerabilityAdvisorServiceOptions.acceptLanguage);
        expect(mockRequestOptions.path.resource).toEqual(resource);
        expect(mockRequestOptions.path.issueType).toEqual(issueType);
        expect(mockRequestOptions.path.issueID).toEqual(issueId);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const resource = 'testString';
        const issueType = 'testString';
        const issueId = 'testString';
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const getExemptionResourceParams = {
          resource,
          issueType,
          issueId,
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.getExemptionResource(getExemptionResourceParams);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });
    });

    describe('negative tests', () => {
      test('should enforce required parameters', async () => {
        let err;
        try {
          await vulnerabilityAdvisorService.getExemptionResource({});
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
      });

      test('should reject promise when required params are not given', async () => {
        let err;
        try {
          await vulnerabilityAdvisorService.getExemptionResource();
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
      });
    });
  });

  describe('createExemptionResource', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation createExemptionResource
        const resource = 'testString';
        const issueType = 'testString';
        const issueId = 'testString';
        const createExemptionResourceParams = {
          resource,
          issueType,
          issueId,
        };

        const createExemptionResourceResult = vulnerabilityAdvisorService.createExemptionResource(createExemptionResourceParams);

        // all methods should return a Promise
        expectToBePromise(createExemptionResourceResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const mockRequestOptions = getOptions(createRequestMock);

        checkUrlAndMethod(mockRequestOptions, '/va/api/v4/exempt/image/{resource}/issue/{issueType}/{issueID}', 'POST');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', vulnerabilityAdvisorServiceOptions.account);
        checkUserHeader(createRequestMock, 'Accept-Language', vulnerabilityAdvisorServiceOptions.acceptLanguage);
        expect(mockRequestOptions.path.resource).toEqual(resource);
        expect(mockRequestOptions.path.issueType).toEqual(issueType);
        expect(mockRequestOptions.path.issueID).toEqual(issueId);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const resource = 'testString';
        const issueType = 'testString';
        const issueId = 'testString';
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const createExemptionResourceParams = {
          resource,
          issueType,
          issueId,
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.createExemptionResource(createExemptionResourceParams);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });
    });

    describe('negative tests', () => {
      test('should enforce required parameters', async () => {
        let err;
        try {
          await vulnerabilityAdvisorService.createExemptionResource({});
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
      });

      test('should reject promise when required params are not given', async () => {
        let err;
        try {
          await vulnerabilityAdvisorService.createExemptionResource();
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
      });
    });
  });

  describe('deleteExemptionResource', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation deleteExemptionResource
        const resource = 'testString';
        const issueType = 'testString';
        const issueId = 'testString';
        const deleteExemptionResourceParams = {
          resource,
          issueType,
          issueId,
        };

        const deleteExemptionResourceResult = vulnerabilityAdvisorService.deleteExemptionResource(deleteExemptionResourceParams);

        // all methods should return a Promise
        expectToBePromise(deleteExemptionResourceResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const mockRequestOptions = getOptions(createRequestMock);

        checkUrlAndMethod(mockRequestOptions, '/va/api/v4/exempt/image/{resource}/issue/{issueType}/{issueID}', 'DELETE');
        const expectedAccept = undefined;
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', vulnerabilityAdvisorServiceOptions.account);
        checkUserHeader(createRequestMock, 'Accept-Language', vulnerabilityAdvisorServiceOptions.acceptLanguage);
        expect(mockRequestOptions.path.resource).toEqual(resource);
        expect(mockRequestOptions.path.issueType).toEqual(issueType);
        expect(mockRequestOptions.path.issueID).toEqual(issueId);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const resource = 'testString';
        const issueType = 'testString';
        const issueId = 'testString';
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const deleteExemptionResourceParams = {
          resource,
          issueType,
          issueId,
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.deleteExemptionResource(deleteExemptionResourceParams);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });
    });

    describe('negative tests', () => {
      test('should enforce required parameters', async () => {
        let err;
        try {
          await vulnerabilityAdvisorService.deleteExemptionResource({});
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
      });

      test('should reject promise when required params are not given', async () => {
        let err;
        try {
          await vulnerabilityAdvisorService.deleteExemptionResource();
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
      });
    });
  });

  describe('exemptHandler', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation exemptHandler
        const exemptHandlerParams = {};

        const exemptHandlerResult = vulnerabilityAdvisorService.exemptHandler(exemptHandlerParams);

        // all methods should return a Promise
        expectToBePromise(exemptHandlerResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const mockRequestOptions = getOptions(createRequestMock);

        checkUrlAndMethod(mockRequestOptions, '/va/api/v4/exempt/types', 'GET');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', vulnerabilityAdvisorServiceOptions.account);
        checkUserHeader(createRequestMock, 'Accept-Language', vulnerabilityAdvisorServiceOptions.acceptLanguage);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const exemptHandlerParams = {
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.exemptHandler(exemptHandlerParams);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });

      test('should not have any problems when no parameters are passed in', () => {
        // invoke the method with no parameters
        vulnerabilityAdvisorService.exemptHandler({});
        checkForSuccessfulExecution(createRequestMock);
      });
    });
  });

  describe('listAccountExemptions', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation listAccountExemptions
        const listAccountExemptionsParams = {};

        const listAccountExemptionsResult = vulnerabilityAdvisorService.listAccountExemptions(listAccountExemptionsParams);

        // all methods should return a Promise
        expectToBePromise(listAccountExemptionsResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const mockRequestOptions = getOptions(createRequestMock);

        checkUrlAndMethod(mockRequestOptions, '/va/api/v4/exemptions/account', 'GET');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', vulnerabilityAdvisorServiceOptions.account);
        checkUserHeader(createRequestMock, 'Accept-Language', vulnerabilityAdvisorServiceOptions.acceptLanguage);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const listAccountExemptionsParams = {
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.listAccountExemptions(listAccountExemptionsParams);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });

      test('should not have any problems when no parameters are passed in', () => {
        // invoke the method with no parameters
        vulnerabilityAdvisorService.listAccountExemptions({});
        checkForSuccessfulExecution(createRequestMock);
      });
    });
  });

  describe('exemptionsAccountDeleteHandler', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation exemptionsAccountDeleteHandler
        const exemptionsAccountDeleteHandlerParams = {};

        const exemptionsAccountDeleteHandlerResult = vulnerabilityAdvisorService.exemptionsAccountDeleteHandler(exemptionsAccountDeleteHandlerParams);

        // all methods should return a Promise
        expectToBePromise(exemptionsAccountDeleteHandlerResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const mockRequestOptions = getOptions(createRequestMock);

        checkUrlAndMethod(mockRequestOptions, '/va/api/v4/exemptions/deleteAll', 'POST');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', vulnerabilityAdvisorServiceOptions.account);
        checkUserHeader(createRequestMock, 'Accept-Language', vulnerabilityAdvisorServiceOptions.acceptLanguage);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const exemptionsAccountDeleteHandlerParams = {
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.exemptionsAccountDeleteHandler(exemptionsAccountDeleteHandlerParams);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });

      test('should not have any problems when no parameters are passed in', () => {
        // invoke the method with no parameters
        vulnerabilityAdvisorService.exemptionsAccountDeleteHandler({});
        checkForSuccessfulExecution(createRequestMock);
      });
    });
  });

  describe('listImageExemptions', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation listImageExemptions
        const resource = 'testString';
        const includeScope = false;
        const listImageExemptionsParams = {
          resource,
          includeScope,
        };

        const listImageExemptionsResult = vulnerabilityAdvisorService.listImageExemptions(listImageExemptionsParams);

        // all methods should return a Promise
        expectToBePromise(listImageExemptionsResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const mockRequestOptions = getOptions(createRequestMock);

        checkUrlAndMethod(mockRequestOptions, '/va/api/v4/exemptions/image/{resource}', 'GET');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', vulnerabilityAdvisorServiceOptions.account);
        checkUserHeader(createRequestMock, 'Accept-Language', vulnerabilityAdvisorServiceOptions.acceptLanguage);
        expect(mockRequestOptions.qs.includeScope).toEqual(includeScope);
        expect(mockRequestOptions.path.resource).toEqual(resource);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const resource = 'testString';
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const listImageExemptionsParams = {
          resource,
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.listImageExemptions(listImageExemptionsParams);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });
    });

    describe('negative tests', () => {
      test('should enforce required parameters', async () => {
        let err;
        try {
          await vulnerabilityAdvisorService.listImageExemptions({});
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
      });

      test('should reject promise when required params are not given', async () => {
        let err;
        try {
          await vulnerabilityAdvisorService.listImageExemptions();
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
      });
    });
  });

  describe('listBulkImageExemptions', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation listBulkImageExemptions
        const body = ['us.icr.io/birds/woodpecker:green', 'us.icr.io/birds/grebe:crested'];
        const listBulkImageExemptionsParams = {
          body,
        };

        const listBulkImageExemptionsResult = vulnerabilityAdvisorService.listBulkImageExemptions(listBulkImageExemptionsParams);

        // all methods should return a Promise
        expectToBePromise(listBulkImageExemptionsResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const mockRequestOptions = getOptions(createRequestMock);

        checkUrlAndMethod(mockRequestOptions, '/va/api/v4/exemptions/images', 'POST');
        const expectedAccept = 'application/json';
        const expectedContentType = 'application/json';
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', vulnerabilityAdvisorServiceOptions.account);
        checkUserHeader(createRequestMock, 'Accept-Language', vulnerabilityAdvisorServiceOptions.acceptLanguage);
        expect(mockRequestOptions.body).toEqual(body);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const body = ['us.icr.io/birds/woodpecker:green', 'us.icr.io/birds/grebe:crested'];
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const listBulkImageExemptionsParams = {
          body,
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.listBulkImageExemptions(listBulkImageExemptionsParams);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });
    });

    describe('negative tests', () => {
      test('should enforce required parameters', async () => {
        let err;
        try {
          await vulnerabilityAdvisorService.listBulkImageExemptions({});
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
      });

      test('should reject promise when required params are not given', async () => {
        let err;
        try {
          await vulnerabilityAdvisorService.listBulkImageExemptions();
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
      });
    });
  });
});
