/**
 * (C) Copyright IBM Corp. 2021.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';

// need to import the whole package to mock getAuthenticatorFromEnvironment
const core = require('ibm-cloud-sdk-core');
const { NoAuthAuthenticator, unitTestUtils } = core;

const VulnerabilityAdvisorV3 = require('../../dist/vulnerability-advisor/v3');

const {
  getOptions,
  checkUrlAndMethod,
  checkMediaHeaders,
  expectToBePromise,
  checkUserHeader,
  checkForSuccessfulExecution,
} = unitTestUtils;

const service = {
  authenticator: new NoAuthAuthenticator(),
  url: 'https://us.icr.io',
  account: 'testString',
  acceptLanguage: 'testString',
};

const vulnerabilityAdvisorService = new VulnerabilityAdvisorV3(service);

// dont actually create a request
const createRequestMock = jest.spyOn(vulnerabilityAdvisorService, 'createRequest');
createRequestMock.mockImplementation(() => Promise.resolve());

// dont actually construct an authenticator
const getAuthenticatorMock = jest.spyOn(core, 'getAuthenticatorFromEnvironment');
getAuthenticatorMock.mockImplementation(() => new NoAuthAuthenticator());

afterEach(() => {
  createRequestMock.mockClear();
  getAuthenticatorMock.mockClear();
});

// used for the service construction tests
let requiredGlobals;
beforeEach(() => {
  // these are changed when passed into the factory/constructor, so re-init
  requiredGlobals = {
    account: 'testString',
  };
});

describe('VulnerabilityAdvisorV3', () => {
  describe('the newInstance method', () => {
    test('should use defaults when options not provided', () => {
      const testInstance = VulnerabilityAdvisorV3.newInstance(requiredGlobals);

      expect(getAuthenticatorMock).toHaveBeenCalled();
      expect(testInstance.baseOptions.authenticator).toBeInstanceOf(NoAuthAuthenticator);
      expect(testInstance.baseOptions.serviceName).toBe(
        VulnerabilityAdvisorV3.DEFAULT_SERVICE_NAME
      );
      expect(testInstance.baseOptions.serviceUrl).toBe(VulnerabilityAdvisorV3.DEFAULT_SERVICE_URL);
      expect(testInstance).toBeInstanceOf(VulnerabilityAdvisorV3);
    });

    test('should set serviceName, serviceUrl, and authenticator when provided', () => {
      let options = {
        authenticator: new NoAuthAuthenticator(),
        serviceUrl: 'custom.com',
        serviceName: 'my-service',
      };

      options = Object.assign(options, requiredGlobals);

      const testInstance = VulnerabilityAdvisorV3.newInstance(options);

      expect(getAuthenticatorMock).not.toHaveBeenCalled();
      expect(testInstance.baseOptions.authenticator).toBeInstanceOf(NoAuthAuthenticator);
      expect(testInstance.baseOptions.serviceUrl).toBe('custom.com');
      expect(testInstance.baseOptions.serviceName).toBe('my-service');
      expect(testInstance).toBeInstanceOf(VulnerabilityAdvisorV3);
    });
  });
  describe('the constructor', () => {
    test('use user-given service url', () => {
      let options = {
        authenticator: new NoAuthAuthenticator(),
        serviceUrl: 'custom.com',
      };

      options = Object.assign(options, requiredGlobals);

      const testInstance = new VulnerabilityAdvisorV3(options);

      expect(testInstance.baseOptions.serviceUrl).toBe('custom.com');
    });

    test('use default service url', () => {
      let options = {
        authenticator: new NoAuthAuthenticator(),
      };

      options = Object.assign(options, requiredGlobals);

      const testInstance = new VulnerabilityAdvisorV3(options);

      expect(testInstance.baseOptions.serviceUrl).toBe(VulnerabilityAdvisorV3.DEFAULT_SERVICE_URL);
    });
  });
  describe('service-level tests', () => {
    describe('positive tests', () => {
      test('construct service with global params', () => {
        const serviceObj = new VulnerabilityAdvisorV3(service);
        expect(serviceObj).not.toBeNull();
        expect(serviceObj.account).toEqual(service.account);
        expect(serviceObj.acceptLanguage).toEqual(service.acceptLanguage);
      });
    });
  });
  describe('accountReportQueryPath', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation accountReportQueryPath
        const repository = 'testString';
        const includeIbm = 'testString';
        const includePrivate = 'testString';
        const params = {
          repository: repository,
          includeIbm: includeIbm,
          includePrivate: includePrivate,
        };

        const accountReportQueryPathResult = vulnerabilityAdvisorService.accountReportQueryPath(
          params
        );

        // all methods should return a Promise
        expectToBePromise(accountReportQueryPathResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const options = getOptions(createRequestMock);

        checkUrlAndMethod(options, '/va/api/v3/report/account', 'GET');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', service.account);
        checkUserHeader(createRequestMock, 'Accept-Language', service.acceptLanguage);
        expect(options.qs['repository']).toEqual(repository);
        expect(options.qs['includeIBM']).toEqual(includeIbm);
        expect(options.qs['includePrivate']).toEqual(includePrivate);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const params = {
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.accountReportQueryPath(params);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });

      test('should not have any problems when no parameters are passed in', () => {
        // invoke the method with no parameters
        vulnerabilityAdvisorService.accountReportQueryPath({});
        checkForSuccessfulExecution(createRequestMock);
      });
    });
  });
  describe('accountStatusQueryPath', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation accountStatusQueryPath
        const repository = 'testString';
        const includeIbm = 'testString';
        const includePrivate = 'testString';
        const params = {
          repository: repository,
          includeIbm: includeIbm,
          includePrivate: includePrivate,
        };

        const accountStatusQueryPathResult = vulnerabilityAdvisorService.accountStatusQueryPath(
          params
        );

        // all methods should return a Promise
        expectToBePromise(accountStatusQueryPathResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const options = getOptions(createRequestMock);

        checkUrlAndMethod(options, '/va/api/v3/report/account/status', 'GET');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', service.account);
        checkUserHeader(createRequestMock, 'Accept-Language', service.acceptLanguage);
        expect(options.qs['repository']).toEqual(repository);
        expect(options.qs['includeIBM']).toEqual(includeIbm);
        expect(options.qs['includePrivate']).toEqual(includePrivate);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const params = {
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.accountStatusQueryPath(params);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });

      test('should not have any problems when no parameters are passed in', () => {
        // invoke the method with no parameters
        vulnerabilityAdvisorService.accountStatusQueryPath({});
        checkForSuccessfulExecution(createRequestMock);
      });
    });
  });
  describe('imageReportQueryPath', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation imageReportQueryPath
        const name = 'testString';
        const params = {
          name: name,
        };

        const imageReportQueryPathResult = vulnerabilityAdvisorService.imageReportQueryPath(params);

        // all methods should return a Promise
        expectToBePromise(imageReportQueryPathResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const options = getOptions(createRequestMock);

        checkUrlAndMethod(options, '/va/api/v3/report/image/{name}', 'GET');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', service.account);
        checkUserHeader(createRequestMock, 'Accept-Language', service.acceptLanguage);
        expect(options.path['name']).toEqual(name);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const name = 'testString';
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const params = {
          name,
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.imageReportQueryPath(params);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });
    });

    describe('negative tests', () => {
      test('should enforce required parameters', async done => {
        let err;
        try {
          await vulnerabilityAdvisorService.imageReportQueryPath({});
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
        done();
      });

      test('should reject promise when required params are not given', done => {
        const imageReportQueryPathPromise = vulnerabilityAdvisorService.imageReportQueryPath();
        expectToBePromise(imageReportQueryPathPromise);

        imageReportQueryPathPromise.catch(err => {
          expect(err.message).toMatch(/Missing required parameters/);
          done();
        });
      });
    });
  });
  describe('imageStatusQueryPath', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation imageStatusQueryPath
        const name = 'testString';
        const params = {
          name: name,
        };

        const imageStatusQueryPathResult = vulnerabilityAdvisorService.imageStatusQueryPath(params);

        // all methods should return a Promise
        expectToBePromise(imageStatusQueryPathResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const options = getOptions(createRequestMock);

        checkUrlAndMethod(options, '/va/api/v3/report/image/status/{name}', 'GET');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', service.account);
        checkUserHeader(createRequestMock, 'Accept-Language', service.acceptLanguage);
        expect(options.path['name']).toEqual(name);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const name = 'testString';
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const params = {
          name,
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.imageStatusQueryPath(params);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });
    });

    describe('negative tests', () => {
      test('should enforce required parameters', async done => {
        let err;
        try {
          await vulnerabilityAdvisorService.imageStatusQueryPath({});
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
        done();
      });

      test('should reject promise when required params are not given', done => {
        const imageStatusQueryPathPromise = vulnerabilityAdvisorService.imageStatusQueryPath();
        expectToBePromise(imageStatusQueryPathPromise);

        imageStatusQueryPathPromise.catch(err => {
          expect(err.message).toMatch(/Missing required parameters/);
          done();
        });
      });
    });
  });
  describe('listExemptionAccount', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation listExemptionAccount
        const params = {};

        const listExemptionAccountResult = vulnerabilityAdvisorService.listExemptionAccount(params);

        // all methods should return a Promise
        expectToBePromise(listExemptionAccountResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const options = getOptions(createRequestMock);

        checkUrlAndMethod(options, '/va/api/v3/exempt/image', 'GET');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', service.account);
        checkUserHeader(createRequestMock, 'Accept-Language', service.acceptLanguage);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const params = {
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.listExemptionAccount(params);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });

      test('should not have any problems when no parameters are passed in', () => {
        // invoke the method with no parameters
        vulnerabilityAdvisorService.listExemptionAccount({});
        checkForSuccessfulExecution(createRequestMock);
      });
    });
  });
  describe('getExemptionAccount', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation getExemptionAccount
        const issueType = 'testString';
        const issueId = 'testString';
        const params = {
          issueType: issueType,
          issueId: issueId,
        };

        const getExemptionAccountResult = vulnerabilityAdvisorService.getExemptionAccount(params);

        // all methods should return a Promise
        expectToBePromise(getExemptionAccountResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const options = getOptions(createRequestMock);

        checkUrlAndMethod(options, '/va/api/v3/exempt/image/issue/{issueType}/{issueID}', 'GET');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', service.account);
        checkUserHeader(createRequestMock, 'Accept-Language', service.acceptLanguage);
        expect(options.path['issueType']).toEqual(issueType);
        expect(options.path['issueID']).toEqual(issueId);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const issueType = 'testString';
        const issueId = 'testString';
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const params = {
          issueType,
          issueId,
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.getExemptionAccount(params);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });
    });

    describe('negative tests', () => {
      test('should enforce required parameters', async done => {
        let err;
        try {
          await vulnerabilityAdvisorService.getExemptionAccount({});
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
        done();
      });

      test('should reject promise when required params are not given', done => {
        const getExemptionAccountPromise = vulnerabilityAdvisorService.getExemptionAccount();
        expectToBePromise(getExemptionAccountPromise);

        getExemptionAccountPromise.catch(err => {
          expect(err.message).toMatch(/Missing required parameters/);
          done();
        });
      });
    });
  });
  describe('createExemptionAccount', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation createExemptionAccount
        const issueType = 'testString';
        const issueId = 'testString';
        const params = {
          issueType: issueType,
          issueId: issueId,
        };

        const createExemptionAccountResult = vulnerabilityAdvisorService.createExemptionAccount(
          params
        );

        // all methods should return a Promise
        expectToBePromise(createExemptionAccountResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const options = getOptions(createRequestMock);

        checkUrlAndMethod(options, '/va/api/v3/exempt/image/issue/{issueType}/{issueID}', 'POST');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', service.account);
        checkUserHeader(createRequestMock, 'Accept-Language', service.acceptLanguage);
        expect(options.path['issueType']).toEqual(issueType);
        expect(options.path['issueID']).toEqual(issueId);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const issueType = 'testString';
        const issueId = 'testString';
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const params = {
          issueType,
          issueId,
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.createExemptionAccount(params);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });
    });

    describe('negative tests', () => {
      test('should enforce required parameters', async done => {
        let err;
        try {
          await vulnerabilityAdvisorService.createExemptionAccount({});
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
        done();
      });

      test('should reject promise when required params are not given', done => {
        const createExemptionAccountPromise = vulnerabilityAdvisorService.createExemptionAccount();
        expectToBePromise(createExemptionAccountPromise);

        createExemptionAccountPromise.catch(err => {
          expect(err.message).toMatch(/Missing required parameters/);
          done();
        });
      });
    });
  });
  describe('deleteExemptionAccount', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation deleteExemptionAccount
        const issueType = 'testString';
        const issueId = 'testString';
        const params = {
          issueType: issueType,
          issueId: issueId,
        };

        const deleteExemptionAccountResult = vulnerabilityAdvisorService.deleteExemptionAccount(
          params
        );

        // all methods should return a Promise
        expectToBePromise(deleteExemptionAccountResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const options = getOptions(createRequestMock);

        checkUrlAndMethod(options, '/va/api/v3/exempt/image/issue/{issueType}/{issueID}', 'DELETE');
        const expectedAccept = undefined;
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', service.account);
        checkUserHeader(createRequestMock, 'Accept-Language', service.acceptLanguage);
        expect(options.path['issueType']).toEqual(issueType);
        expect(options.path['issueID']).toEqual(issueId);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const issueType = 'testString';
        const issueId = 'testString';
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const params = {
          issueType,
          issueId,
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.deleteExemptionAccount(params);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });
    });

    describe('negative tests', () => {
      test('should enforce required parameters', async done => {
        let err;
        try {
          await vulnerabilityAdvisorService.deleteExemptionAccount({});
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
        done();
      });

      test('should reject promise when required params are not given', done => {
        const deleteExemptionAccountPromise = vulnerabilityAdvisorService.deleteExemptionAccount();
        expectToBePromise(deleteExemptionAccountPromise);

        deleteExemptionAccountPromise.catch(err => {
          expect(err.message).toMatch(/Missing required parameters/);
          done();
        });
      });
    });
  });
  describe('listExemptionResource', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation listExemptionResource
        const resource = 'testString';
        const params = {
          resource: resource,
        };

        const listExemptionResourceResult = vulnerabilityAdvisorService.listExemptionResource(
          params
        );

        // all methods should return a Promise
        expectToBePromise(listExemptionResourceResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const options = getOptions(createRequestMock);

        checkUrlAndMethod(options, '/va/api/v3/exempt/image/{resource}', 'GET');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', service.account);
        checkUserHeader(createRequestMock, 'Accept-Language', service.acceptLanguage);
        expect(options.path['resource']).toEqual(resource);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const resource = 'testString';
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const params = {
          resource,
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.listExemptionResource(params);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });
    });

    describe('negative tests', () => {
      test('should enforce required parameters', async done => {
        let err;
        try {
          await vulnerabilityAdvisorService.listExemptionResource({});
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
        done();
      });

      test('should reject promise when required params are not given', done => {
        const listExemptionResourcePromise = vulnerabilityAdvisorService.listExemptionResource();
        expectToBePromise(listExemptionResourcePromise);

        listExemptionResourcePromise.catch(err => {
          expect(err.message).toMatch(/Missing required parameters/);
          done();
        });
      });
    });
  });
  describe('getExemptionResource', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation getExemptionResource
        const resource = 'testString';
        const issueType = 'testString';
        const issueId = 'testString';
        const params = {
          resource: resource,
          issueType: issueType,
          issueId: issueId,
        };

        const getExemptionResourceResult = vulnerabilityAdvisorService.getExemptionResource(params);

        // all methods should return a Promise
        expectToBePromise(getExemptionResourceResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const options = getOptions(createRequestMock);

        checkUrlAndMethod(
          options,
          '/va/api/v3/exempt/image/{resource}/issue/{issueType}/{issueID}',
          'GET'
        );
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', service.account);
        checkUserHeader(createRequestMock, 'Accept-Language', service.acceptLanguage);
        expect(options.path['resource']).toEqual(resource);
        expect(options.path['issueType']).toEqual(issueType);
        expect(options.path['issueID']).toEqual(issueId);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const resource = 'testString';
        const issueType = 'testString';
        const issueId = 'testString';
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const params = {
          resource,
          issueType,
          issueId,
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.getExemptionResource(params);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });
    });

    describe('negative tests', () => {
      test('should enforce required parameters', async done => {
        let err;
        try {
          await vulnerabilityAdvisorService.getExemptionResource({});
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
        done();
      });

      test('should reject promise when required params are not given', done => {
        const getExemptionResourcePromise = vulnerabilityAdvisorService.getExemptionResource();
        expectToBePromise(getExemptionResourcePromise);

        getExemptionResourcePromise.catch(err => {
          expect(err.message).toMatch(/Missing required parameters/);
          done();
        });
      });
    });
  });
  describe('createExemptionResource', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation createExemptionResource
        const resource = 'testString';
        const issueType = 'testString';
        const issueId = 'testString';
        const params = {
          resource: resource,
          issueType: issueType,
          issueId: issueId,
        };

        const createExemptionResourceResult = vulnerabilityAdvisorService.createExemptionResource(
          params
        );

        // all methods should return a Promise
        expectToBePromise(createExemptionResourceResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const options = getOptions(createRequestMock);

        checkUrlAndMethod(
          options,
          '/va/api/v3/exempt/image/{resource}/issue/{issueType}/{issueID}',
          'POST'
        );
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', service.account);
        checkUserHeader(createRequestMock, 'Accept-Language', service.acceptLanguage);
        expect(options.path['resource']).toEqual(resource);
        expect(options.path['issueType']).toEqual(issueType);
        expect(options.path['issueID']).toEqual(issueId);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const resource = 'testString';
        const issueType = 'testString';
        const issueId = 'testString';
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const params = {
          resource,
          issueType,
          issueId,
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.createExemptionResource(params);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });
    });

    describe('negative tests', () => {
      test('should enforce required parameters', async done => {
        let err;
        try {
          await vulnerabilityAdvisorService.createExemptionResource({});
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
        done();
      });

      test('should reject promise when required params are not given', done => {
        const createExemptionResourcePromise = vulnerabilityAdvisorService.createExemptionResource();
        expectToBePromise(createExemptionResourcePromise);

        createExemptionResourcePromise.catch(err => {
          expect(err.message).toMatch(/Missing required parameters/);
          done();
        });
      });
    });
  });
  describe('deleteExemptionResource', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation deleteExemptionResource
        const resource = 'testString';
        const issueType = 'testString';
        const issueId = 'testString';
        const params = {
          resource: resource,
          issueType: issueType,
          issueId: issueId,
        };

        const deleteExemptionResourceResult = vulnerabilityAdvisorService.deleteExemptionResource(
          params
        );

        // all methods should return a Promise
        expectToBePromise(deleteExemptionResourceResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const options = getOptions(createRequestMock);

        checkUrlAndMethod(
          options,
          '/va/api/v3/exempt/image/{resource}/issue/{issueType}/{issueID}',
          'DELETE'
        );
        const expectedAccept = undefined;
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', service.account);
        checkUserHeader(createRequestMock, 'Accept-Language', service.acceptLanguage);
        expect(options.path['resource']).toEqual(resource);
        expect(options.path['issueType']).toEqual(issueType);
        expect(options.path['issueID']).toEqual(issueId);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const resource = 'testString';
        const issueType = 'testString';
        const issueId = 'testString';
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const params = {
          resource,
          issueType,
          issueId,
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.deleteExemptionResource(params);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });
    });

    describe('negative tests', () => {
      test('should enforce required parameters', async done => {
        let err;
        try {
          await vulnerabilityAdvisorService.deleteExemptionResource({});
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
        done();
      });

      test('should reject promise when required params are not given', done => {
        const deleteExemptionResourcePromise = vulnerabilityAdvisorService.deleteExemptionResource();
        expectToBePromise(deleteExemptionResourcePromise);

        deleteExemptionResourcePromise.catch(err => {
          expect(err.message).toMatch(/Missing required parameters/);
          done();
        });
      });
    });
  });
  describe('exemptHandler', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation exemptHandler
        const params = {};

        const exemptHandlerResult = vulnerabilityAdvisorService.exemptHandler(params);

        // all methods should return a Promise
        expectToBePromise(exemptHandlerResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const options = getOptions(createRequestMock);

        checkUrlAndMethod(options, '/va/api/v3/exempt/types', 'GET');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', service.account);
        checkUserHeader(createRequestMock, 'Accept-Language', service.acceptLanguage);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const params = {
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.exemptHandler(params);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });

      test('should not have any problems when no parameters are passed in', () => {
        // invoke the method with no parameters
        vulnerabilityAdvisorService.exemptHandler({});
        checkForSuccessfulExecution(createRequestMock);
      });
    });
  });
  describe('listAccountExemptions', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation listAccountExemptions
        const params = {};

        const listAccountExemptionsResult = vulnerabilityAdvisorService.listAccountExemptions(
          params
        );

        // all methods should return a Promise
        expectToBePromise(listAccountExemptionsResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const options = getOptions(createRequestMock);

        checkUrlAndMethod(options, '/va/api/v3/exemptions/account', 'GET');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', service.account);
        checkUserHeader(createRequestMock, 'Accept-Language', service.acceptLanguage);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const params = {
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.listAccountExemptions(params);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });

      test('should not have any problems when no parameters are passed in', () => {
        // invoke the method with no parameters
        vulnerabilityAdvisorService.listAccountExemptions({});
        checkForSuccessfulExecution(createRequestMock);
      });
    });
  });
  describe('exemptionsAccountDeleteHandler', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation exemptionsAccountDeleteHandler
        const params = {};

        const exemptionsAccountDeleteHandlerResult = vulnerabilityAdvisorService.exemptionsAccountDeleteHandler(
          params
        );

        // all methods should return a Promise
        expectToBePromise(exemptionsAccountDeleteHandlerResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const options = getOptions(createRequestMock);

        checkUrlAndMethod(options, '/va/api/v3/exemptions/deleteAll', 'POST');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', service.account);
        checkUserHeader(createRequestMock, 'Accept-Language', service.acceptLanguage);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const params = {
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.exemptionsAccountDeleteHandler(params);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });

      test('should not have any problems when no parameters are passed in', () => {
        // invoke the method with no parameters
        vulnerabilityAdvisorService.exemptionsAccountDeleteHandler({});
        checkForSuccessfulExecution(createRequestMock);
      });
    });
  });
  describe('listImageExemptions', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation listImageExemptions
        const resource = 'testString';
        const includeScope = true;
        const params = {
          resource: resource,
          includeScope: includeScope,
        };

        const listImageExemptionsResult = vulnerabilityAdvisorService.listImageExemptions(params);

        // all methods should return a Promise
        expectToBePromise(listImageExemptionsResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const options = getOptions(createRequestMock);

        checkUrlAndMethod(options, '/va/api/v3/exemptions/image/{resource}', 'GET');
        const expectedAccept = 'application/json';
        const expectedContentType = undefined;
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', service.account);
        checkUserHeader(createRequestMock, 'Accept-Language', service.acceptLanguage);
        expect(options.qs['includeScope']).toEqual(includeScope);
        expect(options.path['resource']).toEqual(resource);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const resource = 'testString';
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const params = {
          resource,
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.listImageExemptions(params);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });
    });

    describe('negative tests', () => {
      test('should enforce required parameters', async done => {
        let err;
        try {
          await vulnerabilityAdvisorService.listImageExemptions({});
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
        done();
      });

      test('should reject promise when required params are not given', done => {
        const listImageExemptionsPromise = vulnerabilityAdvisorService.listImageExemptions();
        expectToBePromise(listImageExemptionsPromise);

        listImageExemptionsPromise.catch(err => {
          expect(err.message).toMatch(/Missing required parameters/);
          done();
        });
      });
    });
  });
  describe('listBulkImageExemptions', () => {
    describe('positive tests', () => {
      test('should pass the right params to createRequest', () => {
        // Construct the params object for operation listBulkImageExemptions
        const body = ['us.icr.io/birds/woodpecker:green', 'us.icr.io/birds/grebe:crested'];
        const params = {
          body: body,
        };

        const listBulkImageExemptionsResult = vulnerabilityAdvisorService.listBulkImageExemptions(
          params
        );

        // all methods should return a Promise
        expectToBePromise(listBulkImageExemptionsResult);

        // assert that create request was called
        expect(createRequestMock).toHaveBeenCalledTimes(1);

        const options = getOptions(createRequestMock);

        checkUrlAndMethod(options, '/va/api/v3/exemptions/images', 'POST');
        const expectedAccept = 'application/json';
        const expectedContentType = 'application/json';
        checkMediaHeaders(createRequestMock, expectedAccept, expectedContentType);
        checkUserHeader(createRequestMock, 'Account', service.account);
        checkUserHeader(createRequestMock, 'Accept-Language', service.acceptLanguage);
        expect(options.body).toEqual(body);
      });

      test('should prioritize user-given headers', () => {
        // parameters
        const body = ['us.icr.io/birds/woodpecker:green', 'us.icr.io/birds/grebe:crested'];
        const userAccept = 'fake/accept';
        const userContentType = 'fake/contentType';
        const params = {
          body,
          headers: {
            Accept: userAccept,
            'Content-Type': userContentType,
          },
        };

        vulnerabilityAdvisorService.listBulkImageExemptions(params);
        checkMediaHeaders(createRequestMock, userAccept, userContentType);
      });
    });

    describe('negative tests', () => {
      test('should enforce required parameters', async done => {
        let err;
        try {
          await vulnerabilityAdvisorService.listBulkImageExemptions({});
        } catch (e) {
          err = e;
        }

        expect(err.message).toMatch(/Missing required parameters/);
        done();
      });

      test('should reject promise when required params are not given', done => {
        const listBulkImageExemptionsPromise = vulnerabilityAdvisorService.listBulkImageExemptions();
        expectToBePromise(listBulkImageExemptionsPromise);

        listBulkImageExemptionsPromise.catch(err => {
          expect(err.message).toMatch(/Missing required parameters/);
          done();
        });
      });
    });
  });
});
