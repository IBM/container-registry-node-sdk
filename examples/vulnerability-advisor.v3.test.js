/**
* @jest-environment node
*/
/**
 * (C) Copyright IBM Corp. 2021.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
'use strict';

const VulnerabilityAdvisorV3 = require('../dist/vulnerability-advisor/v3');
const { readExternalSources } = require('ibm-cloud-sdk-core');
const authHelper = require('../test/resources/auth-helper.js');

//
// This file provides an example of how to use the Vulnerability Advisor service.
//
// The following configuration properties are assumed to be defined:
// VULNERABILITY_ADVISOR_URL=<service base url>
// VULNERABILITY_ADVISOR_AUTH_TYPE=iam
// VULNERABILITY_ADVISOR_APIKEY=<IAM apikey>
// VULNERABILITY_ADVISOR_AUTH_URL=<IAM token service base URL - omit this if using the production environment>
//
// These configuration properties can be exported as environment variables, or stored
// in a configuration file and then:
// export IBM_CREDENTIALS_FILE=<name of configuration file>
//
const configFile = 'vulnerability_advisor_v3.env';

const describe = authHelper.prepareTests(configFile);

// Save original console.log and console.warn
const originalLog = console.log;
const originalWarn = console.warn;

// Mocks for console.log and console.warn
const consoleLogMock = jest.spyOn(console, 'log');
const consoleWarnMock = jest.spyOn(console, 'warn');

describe('VulnerabilityAdvisorV3', () => {

  // begin-common

  const vulnerabilityAdvisorService = VulnerabilityAdvisorV3.newInstance({
    account: 'accountID', // This is your IBM Cloud Account ID
  });

  // end-common

  const config = readExternalSources(VulnerabilityAdvisorV3.DEFAULT_SERVICE_NAME);

  test('accountReportQueryPath request example', done => {

    consoleLogMock.mockImplementation(output => {
      originalLog(output);
      done();
    });
    consoleWarnMock.mockImplementation(output => {
      done(output);
    });

    // begin-accountReportQueryPath

    vulnerabilityAdvisorService.accountReportQueryPath({})
      .then(res => {
        console.log(JSON.stringify(res.result, null, 2));
      })
      .catch(err => {
        console.warn(err)
      });

    // end-accountReportQueryPath
  });
  test('accountStatusQueryPath request example', done => {

    consoleLogMock.mockImplementation(output => {
      originalLog(output);
      done();
    });
    consoleWarnMock.mockImplementation(output => {
      done(output);
    });

    // begin-accountStatusQueryPath

    vulnerabilityAdvisorService.accountStatusQueryPath({})
      .then(res => {
        console.log(JSON.stringify(res.result, null, 2));
      })
      .catch(err => {
        console.warn(err)
      });

    // end-accountStatusQueryPath
  });
  test('imageReportQueryPath request example', done => {

    consoleLogMock.mockImplementation(output => {
      originalLog(output);
      done();
    });
    consoleWarnMock.mockImplementation(output => {
      done(output);
    });

    // begin-imageReportQueryPath

    const params = {
      name: 'image name',
    };

    vulnerabilityAdvisorService.imageReportQueryPath(params)
      .then(res => {
        console.log(JSON.stringify(res.result, null, 2));
      })
      .catch(err => {
        console.warn(err)
      });

    // end-imageReportQueryPath
  });
  test('imageStatusQueryPath request example', done => {

    consoleLogMock.mockImplementation(output => {
      originalLog(output);
      done();
    });
    consoleWarnMock.mockImplementation(output => {
      done(output);
    });

    // begin-imageStatusQueryPath

    const params = {
      name: 'image name',
    };

    vulnerabilityAdvisorService.imageStatusQueryPath(params)
      .then(res => {
        console.log(JSON.stringify(res.result, null, 2));
      })
      .catch(err => {
        console.warn(err)
      });

    // end-imageStatusQueryPath
  });
  test('listExemptionAccount request example', done => {

    consoleLogMock.mockImplementation(output => {
      originalLog(output);
      done();
    });
    consoleWarnMock.mockImplementation(output => {
      done(output);
    });

    // begin-listExemptionAccount

    vulnerabilityAdvisorService.listExemptionAccount({})
      .then(res => {
        console.log(JSON.stringify(res.result, null, 2));
      })
      .catch(err => {
        console.warn(err)
      });

    // end-listExemptionAccount
  });
  test('getExemptionAccount request example', done => {

    consoleLogMock.mockImplementation(output => {
      originalLog(output);
      done();
    });
    consoleWarnMock.mockImplementation(output => {
      done(output);
    });

    // begin-getExemptionAccount

    const params = {
      issueType: 'cve',
      issueId: 'CVE-2020-0001',
    };

    vulnerabilityAdvisorService.getExemptionAccount(params)
      .then(res => {
        console.log(JSON.stringify(res.result, null, 2));
      })
      .catch(err => {
        console.warn(err)
      });

    // end-getExemptionAccount
  });
  test('createExemptionAccount request example', done => {

    consoleLogMock.mockImplementation(output => {
      originalLog(output);
      done();
    });
    consoleWarnMock.mockImplementation(output => {
      done(output);
    });

    // begin-createExemptionAccount

    const params = {
      issueType: 'cve',
      issueId: 'CVE-2020-0001',
    };

    vulnerabilityAdvisorService.createExemptionAccount(params)
      .then(res => {
        console.log(JSON.stringify(res.result, null, 2));
      })
      .catch(err => {
        console.warn(err)
      });

    // end-createExemptionAccount
  });
  test('listExemptionResource request example', done => {

    consoleLogMock.mockImplementation(output => {
      originalLog(output);
      done();
    });
    consoleWarnMock.mockImplementation(output => {
      done(output);
    });

    // begin-listExemptionResource

    const params = {
      resource: 'image name',
    };

    vulnerabilityAdvisorService.listExemptionResource(params)
      .then(res => {
        console.log(JSON.stringify(res.result, null, 2));
      })
      .catch(err => {
        console.warn(err)
      });

    // end-listExemptionResource
  });
  test('getExemptionResource request example', done => {

    consoleLogMock.mockImplementation(output => {
      originalLog(output);
      done();
    });
    consoleWarnMock.mockImplementation(output => {
      done(output);
    });

    // begin-getExemptionResource

    const params = {
      resource: 'image name',
      issueType: 'cve',
      issueId: 'CVE-2020-0001',
    };

    vulnerabilityAdvisorService.getExemptionResource(params)
      .then(res => {
        console.log(JSON.stringify(res.result, null, 2));
      })
      .catch(err => {
        console.warn(err)
      });

    // end-getExemptionResource
  });
  test('createExemptionResource request example', done => {

    consoleLogMock.mockImplementation(output => {
      originalLog(output);
      done();
    });
    consoleWarnMock.mockImplementation(output => {
      done(output);
    });

    // begin-createExemptionResource

    const params = {
      resource: 'image name',
      issueType: 'cve',
      issueId: 'CVE-2020-0001',
    };

    vulnerabilityAdvisorService.createExemptionResource(params)
      .then(res => {
        console.log(JSON.stringify(res.result, null, 2));
      })
      .catch(err => {
        console.warn(err)
      });

    // end-createExemptionResource
  });
  test('exemptHandler request example', done => {

    consoleLogMock.mockImplementation(output => {
      originalLog(output);
      done();
    });
    consoleWarnMock.mockImplementation(output => {
      done(output);
    });

    // begin-exemptHandler

    vulnerabilityAdvisorService.exemptHandler({})
      .then(res => {
        console.log(JSON.stringify(res.result, null, 2));
      })
      .catch(err => {
        console.warn(err)
      });

    // end-exemptHandler
  });
  test('listAccountExemptions request example', done => {

    consoleLogMock.mockImplementation(output => {
      originalLog(output);
      done();
    });
    consoleWarnMock.mockImplementation(output => {
      done(output);
    });

    // begin-listAccountExemptions

    vulnerabilityAdvisorService.listAccountExemptions({})
      .then(res => {
        console.log(JSON.stringify(res.result, null, 2));
      })
      .catch(err => {
        console.warn(err)
      });

    // end-listAccountExemptions
  });
  test('exemptionsAccountDeleteHandler request example', done => {

    consoleLogMock.mockImplementation(output => {
      originalLog(output);
      done();
    });
    consoleWarnMock.mockImplementation(output => {
      done(output);
    });

    // begin-exemptionsAccountDeleteHandler

    vulnerabilityAdvisorService.exemptionsAccountDeleteHandler({})
      .then(res => {
        console.log(JSON.stringify(res.result, null, 2));
      })
      .catch(err => {
        console.warn(err)
      });

    // end-exemptionsAccountDeleteHandler
  });
  test('listImageExemptions request example', done => {

    consoleLogMock.mockImplementation(output => {
      originalLog(output);
      done();
    });
    consoleWarnMock.mockImplementation(output => {
      done(output);
    });

    // begin-listImageExemptions

    const params = {
      resource: 'image name',
    };

    vulnerabilityAdvisorService.listImageExemptions(params)
      .then(res => {
        console.log(JSON.stringify(res.result, null, 2));
      })
      .catch(err => {
        console.warn(err)
      });

    // end-listImageExemptions
  });
  test('listBulkImageExemptions request example', done => {

    consoleLogMock.mockImplementation(output => {
      originalLog(output);
      done();
    });
    consoleWarnMock.mockImplementation(output => {
      done(output);
    });

    // begin-listBulkImageExemptions

    const params = {
      body: ['image name'],
    };

    vulnerabilityAdvisorService.listBulkImageExemptions(params)
      .then(res => {
        console.log(JSON.stringify(res.result, null, 2));
      })
      .catch(err => {
        console.warn(err)
      });

    // end-listBulkImageExemptions
  });
  test('deleteExemptionResource request example', done => {

    consoleLogMock.mockImplementation(output => {
      originalLog(output);
      done();
    });
    consoleWarnMock.mockImplementation(output => {
      done(output);
    });

    // begin-deleteExemptionResource

    const params = {
      resource: 'image name',
      issueType: 'cve',
      issueId: 'CVE-2020-0001',
    };

    vulnerabilityAdvisorService.deleteExemptionResource(params)
      .then(res => {
        console.log(JSON.stringify(res.result, null, 2));
      })
      .catch(err => {
        console.warn(err)
      });

    // end-deleteExemptionResource
  });
  test('deleteExemptionAccount request example', done => {

    consoleLogMock.mockImplementation(output => {
      originalLog(output);
      done();
    });
    consoleWarnMock.mockImplementation(output => {
      done(output);
    });

    // begin-deleteExemptionAccount

    const params = {
      issueType: 'cve',
      issueId: 'CVE-2020-0001',
    };

    vulnerabilityAdvisorService.deleteExemptionAccount(params)
      .then(res => {
        console.log(JSON.stringify(res.result, null, 2));
      })
      .catch(err => {
        console.warn(err)
      });

    // end-deleteExemptionAccount
  });
});
