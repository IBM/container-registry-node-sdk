/**
 * @jest-environment node
 */
/**
 * (C) Copyright IBM Corp. 2023.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/* eslint-disable no-console */

const VulnerabilityAdvisorV4 = require('../dist/vulnerability-advisor/v4');
// eslint-disable-next-line node/no-unpublished-require
const authHelper = require('../test/resources/auth-helper.js');
// You can use the readExternalSources method to access additional configuration values
// const { readExternalSources } = require('ibm-cloud-sdk-core');

//
// This file provides an example of how to use the Vulnerability Advisor service.
//
// The following configuration properties are assumed to be defined:
// VULNERABILITY_ADVISOR_URL=<service base url>
// VULNERABILITY_ADVISOR_AUTH_TYPE=iam
// VULNERABILITY_ADVISOR_APIKEY=<IAM apikey>
// VULNERABILITY_ADVISOR_AUTH_URL=<IAM token service base URL - omit this if using the production environment>
//
// These configuration properties can be exported as environment variables, or stored
// in a configuration file and then:
// export IBM_CREDENTIALS_FILE=<name of configuration file>
//
const configFile = 'vulnerability_advisor_v4.env';

const describe = authHelper.prepareTests(configFile);

// Save original console.log
const originalLog = console.log;
const originalWarn = console.warn;

// Mocks for console.log and console.warn
const consoleLogMock = jest.spyOn(console, 'log');
const consoleWarnMock = jest.spyOn(console, 'warn');

describe('VulnerabilityAdvisorV4', () => {
  // Service instance
  let vulnerabilityAdvisorService;

  // To access additional configuration values, uncomment this line and extract the values from config
  // const config = readExternalSources(VulnerabilityAdvisorV4.DEFAULT_SERVICE_NAME);

  test('Initialize service', async () => {
    // begin-common

    vulnerabilityAdvisorService = VulnerabilityAdvisorV4.newInstance({
    acceptLanguage: 'en_US',
    account: 'accountID',
    });

    // end-common
  });

  test('accountReportQueryPath request example', async () => {
    consoleLogMock.mockImplementation((output) => {
      originalLog(output);
    });
    consoleWarnMock.mockImplementation((output) => {
      // if an error occurs, display the message and then fail the test
      originalWarn(output);
      expect(true).toBeFalsy();
    });

    originalLog('accountReportQueryPath() result:');
    // begin-accountReportQueryPath

    let res;
    try {
      res = await vulnerabilityAdvisorService.accountReportQueryPath({});
      console.log(JSON.stringify(res.result, null, 2));
    } catch (err) {
      console.warn(err);
    }

    // end-accountReportQueryPath
  });

  test('accountStatusQueryPath request example', async () => {
    consoleLogMock.mockImplementation((output) => {
      originalLog(output);
    });
    consoleWarnMock.mockImplementation((output) => {
      // if an error occurs, display the message and then fail the test
      originalWarn(output);
      expect(true).toBeFalsy();
    });

    originalLog('accountStatusQueryPath() result:');
    // begin-accountStatusQueryPath

    let res;
    try {
      res = await vulnerabilityAdvisorService.accountStatusQueryPath({});
      console.log(JSON.stringify(res.result, null, 2));
    } catch (err) {
      console.warn(err);
    }

    // end-accountStatusQueryPath
  });

  test('imageReportQueryPath request example', async () => {
    consoleLogMock.mockImplementation((output) => {
      originalLog(output);
    });
    consoleWarnMock.mockImplementation((output) => {
      // if an error occurs, display the message and then fail the test
      originalWarn(output);
      expect(true).toBeFalsy();
    });

    originalLog('imageReportQueryPath() result:');
    // begin-imageReportQueryPath

    const params = {
      name: 'image name',
    };

    let res;
    try {
      res = await vulnerabilityAdvisorService.imageReportQueryPath(params);
      console.log(JSON.stringify(res.result, null, 2));
    } catch (err) {
      console.warn(err);
    }

    // end-imageReportQueryPath
  });

  test('imageStatusQueryPath request example', async () => {
    consoleLogMock.mockImplementation((output) => {
      originalLog(output);
    });
    consoleWarnMock.mockImplementation((output) => {
      // if an error occurs, display the message and then fail the test
      originalWarn(output);
      expect(true).toBeFalsy();
    });

    originalLog('imageStatusQueryPath() result:');
    // begin-imageStatusQueryPath

    const params = {
      name: 'image name',
    };

    let res;
    try {
      res = await vulnerabilityAdvisorService.imageStatusQueryPath(params);
      console.log(JSON.stringify(res.result, null, 2));
    } catch (err) {
      console.warn(err);
    }

    // end-imageStatusQueryPath
  });

  test('listExemptionAccount request example', async () => {
    consoleLogMock.mockImplementation((output) => {
      originalLog(output);
    });
    consoleWarnMock.mockImplementation((output) => {
      // if an error occurs, display the message and then fail the test
      originalWarn(output);
      expect(true).toBeFalsy();
    });

    originalLog('listExemptionAccount() result:');
    // begin-listExemptionAccount

    let res;
    try {
      res = await vulnerabilityAdvisorService.listExemptionAccount({});
      console.log(JSON.stringify(res.result, null, 2));
    } catch (err) {
      console.warn(err);
    }

    // end-listExemptionAccount
  });

  test('getExemptionAccount request example', async () => {
    consoleLogMock.mockImplementation((output) => {
      originalLog(output);
    });
    consoleWarnMock.mockImplementation((output) => {
      // if an error occurs, display the message and then fail the test
      originalWarn(output);
      expect(true).toBeFalsy();
    });

    originalLog('getExemptionAccount() result:');
    // begin-getExemptionAccount

    const params = {
      issueType: 'cve',
      issueId: 'CVE-2020-0001',
    };

    let res;
    try {
      res = await vulnerabilityAdvisorService.getExemptionAccount(params);
      console.log(JSON.stringify(res.result, null, 2));
    } catch (err) {
      console.warn(err);
    }

    // end-getExemptionAccount
  });

  test('createExemptionAccount request example', async () => {
    consoleLogMock.mockImplementation((output) => {
      originalLog(output);
    });
    consoleWarnMock.mockImplementation((output) => {
      // if an error occurs, display the message and then fail the test
      originalWarn(output);
      expect(true).toBeFalsy();
    });

    originalLog('createExemptionAccount() result:');
    // begin-createExemptionAccount

    const params = {
      issueType: 'cve',
      issueId: 'CVE-2020-0001',
    };

    let res;
    try {
      res = await vulnerabilityAdvisorService.createExemptionAccount(params);
      console.log(JSON.stringify(res.result, null, 2));
    } catch (err) {
      console.warn(err);
    }

    // end-createExemptionAccount
  });

  test('listExemptionResource request example', async () => {
    consoleLogMock.mockImplementation((output) => {
      originalLog(output);
    });
    consoleWarnMock.mockImplementation((output) => {
      // if an error occurs, display the message and then fail the test
      originalWarn(output);
      expect(true).toBeFalsy();
    });

    originalLog('listExemptionResource() result:');
    // begin-listExemptionResource

    const params = {
      resource: 'image name',
    };

    let res;
    try {
      res = await vulnerabilityAdvisorService.listExemptionResource(params);
      console.log(JSON.stringify(res.result, null, 2));
    } catch (err) {
      console.warn(err);
    }

    // end-listExemptionResource
  });

  test('getExemptionResource request example', async () => {
    consoleLogMock.mockImplementation((output) => {
      originalLog(output);
    });
    consoleWarnMock.mockImplementation((output) => {
      // if an error occurs, display the message and then fail the test
      originalWarn(output);
      expect(true).toBeFalsy();
    });

    originalLog('getExemptionResource() result:');
    // begin-getExemptionResource

    const params = {
      resource: 'image name',
      issueType: 'cve',
      issueId: 'CVE-2020-0001',
    };

    let res;
    try {
      res = await vulnerabilityAdvisorService.getExemptionResource(params);
      console.log(JSON.stringify(res.result, null, 2));
    } catch (err) {
      console.warn(err);
    }

    // end-getExemptionResource
  });

  test('createExemptionResource request example', async () => {
    consoleLogMock.mockImplementation((output) => {
      originalLog(output);
    });
    consoleWarnMock.mockImplementation((output) => {
      // if an error occurs, display the message and then fail the test
      originalWarn(output);
      expect(true).toBeFalsy();
    });

    originalLog('createExemptionResource() result:');
    // begin-createExemptionResource

    const params = {
      resource: 'image name',
      issueType: 'cve',
      issueId: 'CVE-2020-0001',
    };

    let res;
    try {
      res = await vulnerabilityAdvisorService.createExemptionResource(params);
      console.log(JSON.stringify(res.result, null, 2));
    } catch (err) {
      console.warn(err);
    }

    // end-createExemptionResource
  });

  test('exemptHandler request example', async () => {
    consoleLogMock.mockImplementation((output) => {
      originalLog(output);
    });
    consoleWarnMock.mockImplementation((output) => {
      // if an error occurs, display the message and then fail the test
      originalWarn(output);
      expect(true).toBeFalsy();
    });

    originalLog('exemptHandler() result:');
    // begin-exemptHandler

    let res;
    try {
      res = await vulnerabilityAdvisorService.exemptHandler({});
      console.log(JSON.stringify(res.result, null, 2));
    } catch (err) {
      console.warn(err);
    }

    // end-exemptHandler
  });

  test('listAccountExemptions request example', async () => {
    consoleLogMock.mockImplementation((output) => {
      originalLog(output);
    });
    consoleWarnMock.mockImplementation((output) => {
      // if an error occurs, display the message and then fail the test
      originalWarn(output);
      expect(true).toBeFalsy();
    });

    originalLog('listAccountExemptions() result:');
    // begin-listAccountExemptions

    let res;
    try {
      res = await vulnerabilityAdvisorService.listAccountExemptions({});
      console.log(JSON.stringify(res.result, null, 2));
    } catch (err) {
      console.warn(err);
    }

    // end-listAccountExemptions
  });

  test('exemptionsAccountDeleteHandler request example', async () => {
    consoleLogMock.mockImplementation((output) => {
      originalLog(output);
    });
    consoleWarnMock.mockImplementation((output) => {
      // if an error occurs, display the message and then fail the test
      originalWarn(output);
      expect(true).toBeFalsy();
    });

    originalLog('exemptionsAccountDeleteHandler() result:');
    // begin-exemptionsAccountDeleteHandler

    let res;
    try {
      res = await vulnerabilityAdvisorService.exemptionsAccountDeleteHandler({});
      console.log(JSON.stringify(res.result, null, 2));
    } catch (err) {
      console.warn(err);
    }

    // end-exemptionsAccountDeleteHandler
  });

  test('listImageExemptions request example', async () => {
    consoleLogMock.mockImplementation((output) => {
      originalLog(output);
    });
    consoleWarnMock.mockImplementation((output) => {
      // if an error occurs, display the message and then fail the test
      originalWarn(output);
      expect(true).toBeFalsy();
    });

    originalLog('listImageExemptions() result:');
    // begin-listImageExemptions

    const params = {
      resource: 'image name',
    };

    let res;
    try {
      res = await vulnerabilityAdvisorService.listImageExemptions(params);
      console.log(JSON.stringify(res.result, null, 2));
    } catch (err) {
      console.warn(err);
    }

    // end-listImageExemptions
  });

  test('listBulkImageExemptions request example', async () => {
    consoleLogMock.mockImplementation((output) => {
      originalLog(output);
    });
    consoleWarnMock.mockImplementation((output) => {
      // if an error occurs, display the message and then fail the test
      originalWarn(output);
      expect(true).toBeFalsy();
    });

    originalLog('listBulkImageExemptions() result:');
    // begin-listBulkImageExemptions

    const params = {
      body: ['us.icr.io/birds/woodpecker:green', 'us.icr.io/birds/grebe:crested'],
    };

    let res;
    try {
      res = await vulnerabilityAdvisorService.listBulkImageExemptions(params);
      console.log(JSON.stringify(res.result, null, 2));
    } catch (err) {
      console.warn(err);
    }

    // end-listBulkImageExemptions
  });

  test('deleteExemptionAccount request example', async () => {
    consoleLogMock.mockImplementation((output) => {
      originalLog(output);
    });
    consoleWarnMock.mockImplementation((output) => {
      // if an error occurs, display the message and then fail the test
      originalWarn(output);
      expect(true).toBeFalsy();
    });

    // begin-deleteExemptionAccount

    const params = {
      issueType: 'cve',
      issueId: 'CVE-2020-0001',
    };

    try {
      await vulnerabilityAdvisorService.deleteExemptionAccount(params);
    } catch (err) {
      console.warn(err);
    }

    // end-deleteExemptionAccount
  });

  test('deleteExemptionResource request example', async () => {
    consoleLogMock.mockImplementation((output) => {
      originalLog(output);
    });
    consoleWarnMock.mockImplementation((output) => {
      // if an error occurs, display the message and then fail the test
      originalWarn(output);
      expect(true).toBeFalsy();
    });

    // begin-deleteExemptionResource

    const params = {
      resource: 'image name',
      issueType: 'cve',
      issueId: 'CVE-2020-0001',
    };

    try {
      await vulnerabilityAdvisorService.deleteExemptionResource(params);
    } catch (err) {
      console.warn(err);
    }

    // end-deleteExemptionResource
  });
});
