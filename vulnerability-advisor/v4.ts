/**
 * (C) Copyright IBM Corp. 2023.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * IBM OpenAPI SDK Code Generator Version: 3.73.0-eeee85a9-20230607-165104
 */

import * as extend from 'extend';
import { IncomingHttpHeaders, OutgoingHttpHeaders } from 'http';
import {
  Authenticator,
  BaseService,
  getAuthenticatorFromEnvironment,
  validateParams,
  UserOptions,
} from 'ibm-cloud-sdk-core';
import { getSdkHeaders } from '../lib/common';

/**
 * Management interface of Vulnerability Advisor for IBM Cloud Container Registry
 *
 * API Version: 4.0.0
 */

class VulnerabilityAdvisorV4 extends BaseService {
  static DEFAULT_SERVICE_URL: string = 'https://icr.io';

  static DEFAULT_SERVICE_NAME: string = 'vulnerability_advisor';

  private static _regionalEndpoints = new Map([
    ['global', 'https://icr.io'], // global
    ['us-south', 'https://us.icr.io'], // us-south
    ['uk-south', 'https://uk.icr.io'], // uk-south
    ['eu-gb', 'https://uk.icr.io'], // eu-gb
    ['eu-central', 'https://de.icr.io'], // eu-central
    ['eu-de', 'https://de.icr.io'], // eu-de
    ['ap-north', 'https://jp.icr.io'], // ap-north
    ['jp-tok', 'https://jp.icr.io'], // jp-tok
    ['ap-south', 'https://au.icr.io'], // ap-south
    ['au-syd', 'https://au.icr.io'], // au-syd
    ['jp-osa', 'https://jp2.icr.io'], // jp-osa
    ['ca-tor', 'https://ca.icr.io'], // ca-tor
    ['br-sao', 'https://br.icr.io'], // br-sao
  ]);

  /**
   * Returns the service URL associated with the specified region.
   * @param region a string representing the region
   * @returns the service URL associated with the specified region or undefined
   * if no mapping for the region exists
   */
  public static getServiceUrlForRegion(region: string): string {
    return this._regionalEndpoints.get(region)
  }

  /*************************
   * Factory method
   ************************/

  /**
   * Constructs an instance of VulnerabilityAdvisorV4 with passed in options and external configuration.
   *
   * @param {UserOptions} [options] - The parameters to send to the service.
   * @param {string} [options.serviceName] - The name of the service to configure
   * @param {Authenticator} [options.authenticator] - The Authenticator object used to authenticate requests to the service
   * @param {string} [options.serviceUrl] - The URL for the service
   * @returns {VulnerabilityAdvisorV4}
   */

  public static newInstance(options: UserOptions): VulnerabilityAdvisorV4 {
    options = options || {};

    if (!options.serviceName) {
      options.serviceName = this.DEFAULT_SERVICE_NAME;
    }
    if (!options.authenticator) {
      options.authenticator = getAuthenticatorFromEnvironment(options.serviceName);
    }
    const service = new VulnerabilityAdvisorV4(options);
    service.configureService(options.serviceName);
    if (options.serviceUrl) {
      service.setServiceUrl(options.serviceUrl);
    }
    return service;
  }

  /** The preferred language code for this request. */
  acceptLanguage?: string;

  /** The unique ID for your IBM Cloud account. Run 'ibmcloud cr info' to get the ID of the target account. */
  account: string;

  /**
   * Construct a VulnerabilityAdvisorV4 object.
   *
   * @param {Object} options - Options for the service.
   * @param {string} [options.acceptLanguage] - The preferred language code for this request.
   * @param {string} options.account - The unique ID for your IBM Cloud account. Run 'ibmcloud cr info' to get the ID of
   * the target account.
   * @param {string} [options.serviceUrl] - The base url to use when contacting the service. The base url may differ between IBM Cloud regions.
   * @param {OutgoingHttpHeaders} [options.headers] - Default headers that shall be included with every request to the service.
   * @param {Authenticator} options.authenticator - The Authenticator object used to authenticate requests to the service
   * @constructor
   * @returns {VulnerabilityAdvisorV4}
   */
  constructor(options: UserOptions) {
    options = options || {};

    const _requiredParams = ['account'];
    const _validationErrors = validateParams(options, _requiredParams, null);
    if (_validationErrors) {
      throw _validationErrors;
    }
    super(options);
    if (options.serviceUrl) {
      this.setServiceUrl(options.serviceUrl);
    } else {
      this.setServiceUrl(VulnerabilityAdvisorV4.DEFAULT_SERVICE_URL);
    }
    this.acceptLanguage = options.acceptLanguage;
    this.account = options.account;
  }

  /*************************
   * report
   ************************/

  /**
   * Get the vulnerability assessment for all images.
   *
   * Get the vulnerability assessment for the list of registry images that belong to a specific account.
   *
   * @param {Object} [params] - The parameters to send to the service.
   * @param {string} [params.repository] - The name of the repository that you want to see image vulnerability
   * assessments for. For example, us.icr.io/namespace/image.
   * @param {string} [params.includeIbm] - When set to true, the returned list contains IBM public images and the
   * account images. If not set, or set to false, the list contains only the account images.
   * @param {string} [params.includePrivate] - When set to false, the returned list does not contain the private account
   * images. If not set, or set to true, the list contains the private account images.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.ScanReportList>>}
   */
  public accountReportQueryPath(
    params?: VulnerabilityAdvisorV4.AccountReportQueryPathParams
  ): Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.ScanReportList>> {
    const _params = { ...params };
    const _requiredParams = [];
    const _validParams = ['repository', 'includeIbm', 'includePrivate', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'repository': _params.repository,
      'includeIBM': _params.includeIbm,
      'includePrivate': _params.includePrivate,
    };

    const sdkHeaders = getSdkHeaders(
      VulnerabilityAdvisorV4.DEFAULT_SERVICE_NAME,
      'v4',
      'accountReportQueryPath'
    );

    const parameters = {
      options: {
        url: '/va/api/v4/report/account',
        method: 'GET',
        qs: query,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Account': this.account,
            'Accept-Language': this.acceptLanguage,
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Get vulnerability assessment status for all images.
   *
   * Get the vulnerability assessment status for the list of registry images that belong to a specific account.
   *
   * @param {Object} [params] - The parameters to send to the service.
   * @param {string} [params.repository] - The name of the repository that you want to see image vulnerability
   * assessments for. For example, us.icr.io/namespace/image.
   * @param {string} [params.includeIbm] - When set to true, the returned list contains IBM public images and the
   * account images. If not set, or set to false, the list contains only the account images.
   * @param {string} [params.includePrivate] - When set to false, the returned list does not contain the private account
   * images. If not set, or set to true, the list contains the private account images.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.ScanreportImageSummaryList>>}
   */
  public accountStatusQueryPath(
    params?: VulnerabilityAdvisorV4.AccountStatusQueryPathParams
  ): Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.ScanreportImageSummaryList>> {
    const _params = { ...params };
    const _requiredParams = [];
    const _validParams = ['repository', 'includeIbm', 'includePrivate', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'repository': _params.repository,
      'includeIBM': _params.includeIbm,
      'includePrivate': _params.includePrivate,
    };

    const sdkHeaders = getSdkHeaders(
      VulnerabilityAdvisorV4.DEFAULT_SERVICE_NAME,
      'v4',
      'accountStatusQueryPath'
    );

    const parameters = {
      options: {
        url: '/va/api/v4/report/account/status',
        method: 'GET',
        qs: query,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Account': this.account,
            'Accept-Language': this.acceptLanguage,
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Get vulnerability assessment.
   *
   * Get the vulnerability assessment for a registry image.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.name - The name of the image. For example, us.icr.io/namespace/repository:tag.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.ScanReport>>}
   */
  public imageReportQueryPath(
    params: VulnerabilityAdvisorV4.ImageReportQueryPathParams
  ): Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.ScanReport>> {
    const _params = { ...params };
    const _requiredParams = ['name'];
    const _validParams = ['name', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'name': _params.name,
    };

    const sdkHeaders = getSdkHeaders(
      VulnerabilityAdvisorV4.DEFAULT_SERVICE_NAME,
      'v4',
      'imageReportQueryPath'
    );

    const parameters = {
      options: {
        url: '/va/api/v4/report/image/{name}',
        method: 'GET',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Account': this.account,
            'Accept-Language': this.acceptLanguage,
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Get vulnerability assessment status.
   *
   * Get the overall vulnerability status for a registry image.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.name - The name of the image. For example, us.icr.io/namespace/repository:tag.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.ScanreportSummary>>}
   */
  public imageStatusQueryPath(
    params: VulnerabilityAdvisorV4.ImageStatusQueryPathParams
  ): Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.ScanreportSummary>> {
    const _params = { ...params };
    const _requiredParams = ['name'];
    const _validParams = ['name', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'name': _params.name,
    };

    const sdkHeaders = getSdkHeaders(
      VulnerabilityAdvisorV4.DEFAULT_SERVICE_NAME,
      'v4',
      'imageStatusQueryPath'
    );

    const parameters = {
      options: {
        url: '/va/api/v4/report/image/status/{name}',
        method: 'GET',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Account': this.account,
            'Accept-Language': this.acceptLanguage,
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
  /*************************
   * exemption
   ************************/

  /**
   * List account level exemptions.
   *
   * List the exemptions that are specified with account level scope.
   *
   * @param {Object} [params] - The parameters to send to the service.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.Exemption[]>>}
   */
  public listExemptionAccount(
    params?: VulnerabilityAdvisorV4.ListExemptionAccountParams
  ): Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.Exemption[]>> {
    const _params = { ...params };
    const _requiredParams = [];
    const _validParams = ['headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const sdkHeaders = getSdkHeaders(
      VulnerabilityAdvisorV4.DEFAULT_SERVICE_NAME,
      'v4',
      'listExemptionAccount'
    );

    const parameters = {
      options: {
        url: '/va/api/v4/exempt/image',
        method: 'GET',
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Account': this.account,
            'Accept-Language': this.acceptLanguage,
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Get an account level exemption.
   *
   * Get details of an exemption that is specified with account level scope.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.issueType - Exemption type, e.g. 'cve' or 'sn' or 'configuration'. See
   * /va/api/v4/exempt/types for more details.
   * @param {string} params.issueId - Exemption ID, e.g. 'CVE-2018-9999'. See /va/api/v4/exempt/types for more details.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.Exemption>>}
   */
  public getExemptionAccount(
    params: VulnerabilityAdvisorV4.GetExemptionAccountParams
  ): Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.Exemption>> {
    const _params = { ...params };
    const _requiredParams = ['issueType', 'issueId'];
    const _validParams = ['issueType', 'issueId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'issueType': _params.issueType,
      'issueID': _params.issueId,
    };

    const sdkHeaders = getSdkHeaders(
      VulnerabilityAdvisorV4.DEFAULT_SERVICE_NAME,
      'v4',
      'getExemptionAccount'
    );

    const parameters = {
      options: {
        url: '/va/api/v4/exempt/image/issue/{issueType}/{issueID}',
        method: 'GET',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Account': this.account,
            'Accept-Language': this.acceptLanguage,
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Create or update an account level exemption.
   *
   * Create or update an exemption that is specified with account level scope.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.issueType - Exemption type, e.g. 'cve' or 'sn' or 'configuration'. See
   * /va/api/v4/exempt/types for more details.
   * @param {string} params.issueId - Exemption ID, e.g. 'CVE-2018-9999'. See /va/api/v4/exempt/types for more details.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.Exemption>>}
   */
  public createExemptionAccount(
    params: VulnerabilityAdvisorV4.CreateExemptionAccountParams
  ): Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.Exemption>> {
    const _params = { ...params };
    const _requiredParams = ['issueType', 'issueId'];
    const _validParams = ['issueType', 'issueId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'issueType': _params.issueType,
      'issueID': _params.issueId,
    };

    const sdkHeaders = getSdkHeaders(
      VulnerabilityAdvisorV4.DEFAULT_SERVICE_NAME,
      'v4',
      'createExemptionAccount'
    );

    const parameters = {
      options: {
        url: '/va/api/v4/exempt/image/issue/{issueType}/{issueID}',
        method: 'POST',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Account': this.account,
            'Accept-Language': this.acceptLanguage,
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Delete an account level exemption.
   *
   * Delete an exemption that is specified with account level scope.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.issueType - Exemption type, e.g. 'cve' or 'sn' or 'configuration'. See
   * /va/api/v4/exempt/types for more details.
   * @param {string} params.issueId - Exemption ID, e.g. 'CVE-2018-9999'. See /va/api/v4/exempt/types for more details.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.EmptyObject>>}
   */
  public deleteExemptionAccount(
    params: VulnerabilityAdvisorV4.DeleteExemptionAccountParams
  ): Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.EmptyObject>> {
    const _params = { ...params };
    const _requiredParams = ['issueType', 'issueId'];
    const _validParams = ['issueType', 'issueId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'issueType': _params.issueType,
      'issueID': _params.issueId,
    };

    const sdkHeaders = getSdkHeaders(
      VulnerabilityAdvisorV4.DEFAULT_SERVICE_NAME,
      'v4',
      'deleteExemptionAccount'
    );

    const parameters = {
      options: {
        url: '/va/api/v4/exempt/image/issue/{issueType}/{issueID}',
        method: 'DELETE',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Account': this.account,
            'Accept-Language': this.acceptLanguage,
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * List resource exemptions.
   *
   * List the exemptions that are specified for a resource (account, registry namespace, repository, or image).
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.resource - IBM Cloud Registry resource (namespace, namespace/repository,
   * namespace/repository:tag, or namespace/repository@sha256:hash).
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.Exemption[]>>}
   */
  public listExemptionResource(
    params: VulnerabilityAdvisorV4.ListExemptionResourceParams
  ): Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.Exemption[]>> {
    const _params = { ...params };
    const _requiredParams = ['resource'];
    const _validParams = ['resource', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'resource': _params.resource,
    };

    const sdkHeaders = getSdkHeaders(
      VulnerabilityAdvisorV4.DEFAULT_SERVICE_NAME,
      'v4',
      'listExemptionResource'
    );

    const parameters = {
      options: {
        url: '/va/api/v4/exempt/image/{resource}',
        method: 'GET',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Account': this.account,
            'Accept-Language': this.acceptLanguage,
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Get details of a resource exemption.
   *
   * Get an exemption that is specified for a resource (account, registry namespace, repository, or image).
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.resource - IBM Cloud Registry resource (namespace, namespace/repository,
   * namespace/repository:tag, or namespace/repository@sha256:hash).
   * @param {string} params.issueType - Exemption type, e.g. 'cve' or 'sn' or 'configuration'. See
   * /va/api/v4/exempt/types for more details.
   * @param {string} params.issueId - Exemption ID, e.g. 'CVE-2018-9999'. See /va/api/v4/exempt/types for more details.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.Exemption>>}
   */
  public getExemptionResource(
    params: VulnerabilityAdvisorV4.GetExemptionResourceParams
  ): Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.Exemption>> {
    const _params = { ...params };
    const _requiredParams = ['resource', 'issueType', 'issueId'];
    const _validParams = ['resource', 'issueType', 'issueId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'resource': _params.resource,
      'issueType': _params.issueType,
      'issueID': _params.issueId,
    };

    const sdkHeaders = getSdkHeaders(
      VulnerabilityAdvisorV4.DEFAULT_SERVICE_NAME,
      'v4',
      'getExemptionResource'
    );

    const parameters = {
      options: {
        url: '/va/api/v4/exempt/image/{resource}/issue/{issueType}/{issueID}',
        method: 'GET',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Account': this.account,
            'Accept-Language': this.acceptLanguage,
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Create or update a resource exemption.
   *
   * Create or update an exemption that is specified for a resource (account, registry namespace, repository, or image).
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.resource - IBM Cloud Registry resource (namespace, namespace/repository,
   * namespace/repository:tag, or namespace/repository@sha256:hash).
   * @param {string} params.issueType - Exemption type, e.g. 'cve' or 'sn' or 'configuration'. See
   * /va/api/v4/exempt/types for more details.
   * @param {string} params.issueId - Exemption ID, e.g. 'CVE-2018-9999'. See /va/api/v4/exempt/types for more details.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.Exemption>>}
   */
  public createExemptionResource(
    params: VulnerabilityAdvisorV4.CreateExemptionResourceParams
  ): Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.Exemption>> {
    const _params = { ...params };
    const _requiredParams = ['resource', 'issueType', 'issueId'];
    const _validParams = ['resource', 'issueType', 'issueId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'resource': _params.resource,
      'issueType': _params.issueType,
      'issueID': _params.issueId,
    };

    const sdkHeaders = getSdkHeaders(
      VulnerabilityAdvisorV4.DEFAULT_SERVICE_NAME,
      'v4',
      'createExemptionResource'
    );

    const parameters = {
      options: {
        url: '/va/api/v4/exempt/image/{resource}/issue/{issueType}/{issueID}',
        method: 'POST',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Account': this.account,
            'Accept-Language': this.acceptLanguage,
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Delete a resource exemption.
   *
   * Delete an exemption that is specified for a resource (account, registry namespace, repository, or image).
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.resource - IBM Cloud Registry resource (namespace, namespace/repository,
   * namespace/repository:tag, or namespace/repository@sha256:hash).
   * @param {string} params.issueType - Exemption type, e.g. 'cve' or 'sn' or 'configuration'. See
   * /va/api/v4/exempt/types for more details.
   * @param {string} params.issueId - Exemption ID, e.g. 'CVE-2018-9999'. See /va/api/v4/exempt/types for more details.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.EmptyObject>>}
   */
  public deleteExemptionResource(
    params: VulnerabilityAdvisorV4.DeleteExemptionResourceParams
  ): Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.EmptyObject>> {
    const _params = { ...params };
    const _requiredParams = ['resource', 'issueType', 'issueId'];
    const _validParams = ['resource', 'issueType', 'issueId', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const path = {
      'resource': _params.resource,
      'issueType': _params.issueType,
      'issueID': _params.issueId,
    };

    const sdkHeaders = getSdkHeaders(
      VulnerabilityAdvisorV4.DEFAULT_SERVICE_NAME,
      'v4',
      'deleteExemptionResource'
    );

    const parameters = {
      options: {
        url: '/va/api/v4/exempt/image/{resource}/issue/{issueType}/{issueID}',
        method: 'DELETE',
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Account': this.account,
            'Accept-Language': this.acceptLanguage,
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * List the types of exemption.
   *
   * List the types of exemption.
   *
   * @param {Object} [params] - The parameters to send to the service.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.ExemptionTypeInfo[]>>}
   */
  public exemptHandler(
    params?: VulnerabilityAdvisorV4.ExemptHandlerParams
  ): Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.ExemptionTypeInfo[]>> {
    const _params = { ...params };
    const _requiredParams = [];
    const _validParams = ['headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const sdkHeaders = getSdkHeaders(
      VulnerabilityAdvisorV4.DEFAULT_SERVICE_NAME,
      'v4',
      'exemptHandler'
    );

    const parameters = {
      options: {
        url: '/va/api/v4/exempt/types',
        method: 'GET',
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Account': this.account,
            'Accept-Language': this.acceptLanguage,
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * List all exemptions.
   *
   * List all of the exemptions in the given account.
   *
   * @param {Object} [params] - The parameters to send to the service.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.Exemption[]>>}
   */
  public listAccountExemptions(
    params?: VulnerabilityAdvisorV4.ListAccountExemptionsParams
  ): Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.Exemption[]>> {
    const _params = { ...params };
    const _requiredParams = [];
    const _validParams = ['headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const sdkHeaders = getSdkHeaders(
      VulnerabilityAdvisorV4.DEFAULT_SERVICE_NAME,
      'v4',
      'listAccountExemptions'
    );

    const parameters = {
      options: {
        url: '/va/api/v4/exemptions/account',
        method: 'GET',
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Account': this.account,
            'Accept-Language': this.acceptLanguage,
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * Delete all exemptions.
   *
   * Delete all of the exemptions in the given account.
   *
   * @param {Object} [params] - The parameters to send to the service.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.ExemptionDeletionInfo>>}
   */
  public exemptionsAccountDeleteHandler(
    params?: VulnerabilityAdvisorV4.ExemptionsAccountDeleteHandlerParams
  ): Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.ExemptionDeletionInfo>> {
    const _params = { ...params };
    const _requiredParams = [];
    const _validParams = ['headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const sdkHeaders = getSdkHeaders(
      VulnerabilityAdvisorV4.DEFAULT_SERVICE_NAME,
      'v4',
      'exemptionsAccountDeleteHandler'
    );

    const parameters = {
      options: {
        url: '/va/api/v4/exemptions/deleteAll',
        method: 'POST',
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Account': this.account,
            'Accept-Language': this.acceptLanguage,
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * List image exemptions.
   *
   * List all of the exemptions for an image.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string} params.resource - IBM Cloud Registry resource (namespace, namespace/repository,
   * namespace/repository:tag, or namespace/repository@sha256:hash).
   * @param {boolean} [params.includeScope] - Include scope on returned exemptions.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.Exemption[]>>}
   */
  public listImageExemptions(
    params: VulnerabilityAdvisorV4.ListImageExemptionsParams
  ): Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.Exemption[]>> {
    const _params = { ...params };
    const _requiredParams = ['resource'];
    const _validParams = ['resource', 'includeScope', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const query = {
      'includeScope': _params.includeScope,
    };

    const path = {
      'resource': _params.resource,
    };

    const sdkHeaders = getSdkHeaders(
      VulnerabilityAdvisorV4.DEFAULT_SERVICE_NAME,
      'v4',
      'listImageExemptions'
    );

    const parameters = {
      options: {
        url: '/va/api/v4/exemptions/image/{resource}',
        method: 'GET',
        qs: query,
        path,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Account': this.account,
            'Accept-Language': this.acceptLanguage,
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }

  /**
   * List exemptions for images.
   *
   * List the exemptions for the given list of images.
   *
   * @param {Object} params - The parameters to send to the service.
   * @param {string[]} params.body - List of images.
   * @param {OutgoingHttpHeaders} [params.headers] - Custom request headers
   * @returns {Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.JsonObject>>}
   */
  public listBulkImageExemptions(
    params: VulnerabilityAdvisorV4.ListBulkImageExemptionsParams
  ): Promise<VulnerabilityAdvisorV4.Response<VulnerabilityAdvisorV4.JsonObject>> {
    const _params = { ...params };
    const _requiredParams = ['body'];
    const _validParams = ['body', 'headers'];
    const _validationErrors = validateParams(_params, _requiredParams, _validParams);
    if (_validationErrors) {
      return Promise.reject(_validationErrors);
    }

    const body = _params.body;
    const sdkHeaders = getSdkHeaders(
      VulnerabilityAdvisorV4.DEFAULT_SERVICE_NAME,
      'v4',
      'listBulkImageExemptions'
    );

    const parameters = {
      options: {
        url: '/va/api/v4/exemptions/images',
        method: 'POST',
        body,
      },
      defaultOptions: extend(true, {}, this.baseOptions, {
        headers: extend(
          true,
          sdkHeaders,
          {
            'Accept': 'application/json',
            'Content-Type': 'application/json',
            'Account': this.account,
            'Accept-Language': this.acceptLanguage,
          },
          _params.headers
        ),
      }),
    };

    return this.createRequest(parameters);
  }
}

/*************************
 * interfaces
 ************************/

namespace VulnerabilityAdvisorV4 {
  /** Options for the `VulnerabilityAdvisorV4` constructor. */
  export interface Options extends UserOptions {
    /** The preferred language code for this request. */
    acceptLanguage?: string;
    /** The unique ID for your IBM Cloud account. Run 'ibmcloud cr info' to get the ID of the target account. */
    account: string;
  }

  /** An operation response. */
  export interface Response<T = any> {
    result: T;
    status: number;
    statusText: string;
    headers: IncomingHttpHeaders;
  }

  /** The callback for a service request. */
  export type Callback<T> = (error: any, response?: Response<T>) => void;

  /** The body of a service request that returns no response data. */
  export interface EmptyObject {}

  /** A standard JS object, defined to avoid the limitations of `Object` and `object` */
  export interface JsonObject {
    [key: string]: any;
  }

  /*************************
   * request interfaces
   ************************/

  /** Parameters for the `accountReportQueryPath` operation. */
  export interface AccountReportQueryPathParams {
    /** The name of the repository that you want to see image vulnerability assessments for. For example,
     *  us.icr.io/namespace/image.
     */
    repository?: string;
    /** When set to true, the returned list contains IBM public images and the account images. If not set, or set to
     *  false, the list contains only the account images.
     */
    includeIbm?: string;
    /** When set to false, the returned list does not contain the private account images. If not set, or set to
     *  true, the list contains the private account images.
     */
    includePrivate?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `accountStatusQueryPath` operation. */
  export interface AccountStatusQueryPathParams {
    /** The name of the repository that you want to see image vulnerability assessments for. For example,
     *  us.icr.io/namespace/image.
     */
    repository?: string;
    /** When set to true, the returned list contains IBM public images and the account images. If not set, or set to
     *  false, the list contains only the account images.
     */
    includeIbm?: string;
    /** When set to false, the returned list does not contain the private account images. If not set, or set to
     *  true, the list contains the private account images.
     */
    includePrivate?: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `imageReportQueryPath` operation. */
  export interface ImageReportQueryPathParams {
    /** The name of the image. For example, us.icr.io/namespace/repository:tag. */
    name: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `imageStatusQueryPath` operation. */
  export interface ImageStatusQueryPathParams {
    /** The name of the image. For example, us.icr.io/namespace/repository:tag. */
    name: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listExemptionAccount` operation. */
  export interface ListExemptionAccountParams {
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getExemptionAccount` operation. */
  export interface GetExemptionAccountParams {
    /** Exemption type, e.g. 'cve' or 'sn' or 'configuration'. See /va/api/v4/exempt/types for more details. */
    issueType: string;
    /** Exemption ID, e.g. 'CVE-2018-9999'. See /va/api/v4/exempt/types for more details. */
    issueId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createExemptionAccount` operation. */
  export interface CreateExemptionAccountParams {
    /** Exemption type, e.g. 'cve' or 'sn' or 'configuration'. See /va/api/v4/exempt/types for more details. */
    issueType: string;
    /** Exemption ID, e.g. 'CVE-2018-9999'. See /va/api/v4/exempt/types for more details. */
    issueId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `deleteExemptionAccount` operation. */
  export interface DeleteExemptionAccountParams {
    /** Exemption type, e.g. 'cve' or 'sn' or 'configuration'. See /va/api/v4/exempt/types for more details. */
    issueType: string;
    /** Exemption ID, e.g. 'CVE-2018-9999'. See /va/api/v4/exempt/types for more details. */
    issueId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listExemptionResource` operation. */
  export interface ListExemptionResourceParams {
    /** IBM Cloud Registry resource (namespace, namespace/repository, namespace/repository:tag, or
     *  namespace/repository@sha256:hash).
     */
    resource: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `getExemptionResource` operation. */
  export interface GetExemptionResourceParams {
    /** IBM Cloud Registry resource (namespace, namespace/repository, namespace/repository:tag, or
     *  namespace/repository@sha256:hash).
     */
    resource: string;
    /** Exemption type, e.g. 'cve' or 'sn' or 'configuration'. See /va/api/v4/exempt/types for more details. */
    issueType: string;
    /** Exemption ID, e.g. 'CVE-2018-9999'. See /va/api/v4/exempt/types for more details. */
    issueId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `createExemptionResource` operation. */
  export interface CreateExemptionResourceParams {
    /** IBM Cloud Registry resource (namespace, namespace/repository, namespace/repository:tag, or
     *  namespace/repository@sha256:hash).
     */
    resource: string;
    /** Exemption type, e.g. 'cve' or 'sn' or 'configuration'. See /va/api/v4/exempt/types for more details. */
    issueType: string;
    /** Exemption ID, e.g. 'CVE-2018-9999'. See /va/api/v4/exempt/types for more details. */
    issueId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `deleteExemptionResource` operation. */
  export interface DeleteExemptionResourceParams {
    /** IBM Cloud Registry resource (namespace, namespace/repository, namespace/repository:tag, or
     *  namespace/repository@sha256:hash).
     */
    resource: string;
    /** Exemption type, e.g. 'cve' or 'sn' or 'configuration'. See /va/api/v4/exempt/types for more details. */
    issueType: string;
    /** Exemption ID, e.g. 'CVE-2018-9999'. See /va/api/v4/exempt/types for more details. */
    issueId: string;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `exemptHandler` operation. */
  export interface ExemptHandlerParams {
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listAccountExemptions` operation. */
  export interface ListAccountExemptionsParams {
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `exemptionsAccountDeleteHandler` operation. */
  export interface ExemptionsAccountDeleteHandlerParams {
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listImageExemptions` operation. */
  export interface ListImageExemptionsParams {
    /** IBM Cloud Registry resource (namespace, namespace/repository, namespace/repository:tag, or
     *  namespace/repository@sha256:hash).
     */
    resource: string;
    /** Include scope on returned exemptions. */
    includeScope?: boolean;
    headers?: OutgoingHttpHeaders;
  }

  /** Parameters for the `listBulkImageExemptions` operation. */
  export interface ListBulkImageExemptionsParams {
    /** List of images. */
    body: string[];
    headers?: OutgoingHttpHeaders;
  }

  /*************************
   * model interfaces
   ************************/

  /** Exemption. */
  export interface Exemption {
    /** The unique ID for the IBM Cloud account for this policy. */
    account_id: string;
    /** ID of issue being exempted. */
    issue_id: string;
    /** Type of issue being exempted. */
    issue_type: string;
    scope?: ExemptionScope;
  }

  /** ExemptionScope. */
  export interface ExemptionScope {
    /** The type of scope the exemption applies to: account, namespace, repository, image. */
    scope_type: string;
    /** The IBM Cloud Registry namespace included in scope. */
    namespace?: string;
    /** The IBM Cloud Registry repository included in scope. */
    repository?: string;
    /** The IBM Cloud Registry tag included in scope. */
    tag?: string;
  }

  /** ScanReport. */
  export interface ScanReport {
    /** Not supported, will always be empty. */
    configuration_issues: ScanresultConfigurationIssue[];
    /** The unique ID of the report. */
    id: string;
    /** The primary operating system distribution identified in the container image. */
    os_distribution: ScanReportOsDistribution;
    /** The last time that the vulnerability data source was checked for vulnerabilities as a UNIX timestamp. */
    scan_time: number;
    /** Overall vulnerability assessment status: OK, WARN, FAIL, UNSUPPORTED, INCOMPLETE, UNSCANNED. For more
     *  information about these status codes, see
     *  https://{DomainName}/apidocs/container-registry/va#getting-started-vulnerability-report-status-codes.
     */
    status: string;
    /** Vulnerabilities found in the container image at the scan time. */
    vulnerabilities: ScanresultCVE[];
  }

  /** ScanReportList. */
  export interface ScanReportList {
    /** A dictionary of image names as key and report.Report object as value. */
    assessments: JsonObject;
  }

  /** The primary operating system distribution identified in the container image. */
  export interface ScanReportOsDistribution {
    /** Primary operating system distribution. */
    distribution_id?: string;
    /** Primary operating system version. */
    version_id?: string;
    /** Primary operating system version code name. */
    version_code_name?: string;
  }

  /** ExemptionDeletionInfo. */
  export interface ExemptionDeletionInfo {
    number_of_exemptions_deleted: number;
  }

  /** ExemptionTypeInfo. */
  export interface ExemptionTypeInfo {
    display_name: string;
    identifier: string;
    translationKey?: string;
    validation_regex: string;
  }

  /** ScanreportImageSummary. */
  export interface ScanreportImageSummary {
    /** Not supported, this will always be zero. */
    configuration_issue_count: number;
    /** The image creation time as a UNIX timestamp. */
    created_time: number;
    /** Not supported, this will always be zero. */
    exempt_configuration_issue_count: number;
    /** The number of exempt issues found. */
    exempt_issue_count: number;
    /** The number of exempt vulnerability issues found. */
    exempt_vulnerability_count: number;
    /** The number of issues found. */
    issue_count: number;
    /** Full docker image name including tag e.g. us.icr.io/namespace/repository:tag. */
    name: string;
    /** The last time that the vulnerability data source was checked for vulnerabilities as a UNIX timestamp. */
    scan_time: number;
    /** Overall vulnerability assessment status: OK, WARN, FAIL, UNSUPPORTED, INCOMPLETE, UNSCANNED. For more
     *  information about these status codes, see
     *  https://{DomainName}/apidocs/container-registry/va#getting-started-vulnerability-report-status-codes.
     */
    status: string;
    /** The number of vulnerability issues found. */
    vulnerability_count: number;
  }

  /** ScanreportImageSummaryList. */
  export interface ScanreportImageSummaryList {
    /** List of image summaries. */
    images: ScanreportImageSummary[];
  }

  /** ScanreportSummary. */
  export interface ScanreportSummary {
    /** Not supported, this will always be zero. */
    configuration_issue_count: number;
    /** Not supported, this will always be zero. */
    exempt_configuration_issue_count: number;
    /** The number of exempt issues found. */
    exempt_issue_count: number;
    /** The number of exempt vulnerability issues found. */
    exempt_vulnerability_count: number;
    /** The number of issues found. */
    issue_count: number;
    /** The last time that the vulnerability data source was checked for vulnerabilities as a UNIX timestamp. */
    scan_time: number;
    /** Overall vulnerability assessment status: OK, WARN, FAIL, UNSUPPORTED, INCOMPLETE, UNSCANNED. For more
     *  information about these status codes, see
     *  https://{DomainName}/apidocs/container-registry/va#getting-started-vulnerability-report-status-codes.
     */
    status: string;
    /** The number of vulnerability issues found. */
    vulnerability_count: number;
  }

  /** ScanresultCVE. */
  export interface ScanresultCVE {
    /** True if this CVE has been exempted by user policy, and false otherwise. */
    cve_exempt: boolean;
    /** The ID for this CVE. */
    cve_id: string;
    /** Number of security notices that contain fixes for this CVE and are exempted by user policy. */
    exempt_security_notice_count: number;
    /** 'exempt' if this CVE is exempt or all security notices for this CVE are exempt. 'partial' if this CVE is not
     *  exempt but a subset of security notices for this CVE are exempt. 'active' if this CVE is not exempt and no
     *  security notices for this CVE are exempt.
     */
    exempt_status: string;
    /** Number of security notices that contain fixes for this CVE and are not exempted by user policy. */
    security_notice_count: number;
    /** Security notices that contain fixes for this CVE. */
    security_notices: ScanresultSecurityNotice[];
    /** The summary of the security vulnerability for this CVE. */
    summary: string;
    /** Total number of security notices that contain fixes for this CVE. */
    total_security_notice_count: number;
  }

  /** ScanresultConfigurationIssue. */
  export interface ScanresultConfigurationIssue {
    /** Not supported. */
    corrective_action: string;
    /** Not supported. */
    description: string;
    /** Not supported. */
    exempt: boolean;
    /** Not supported. */
    meta: JsonObject;
    /** Not supported. */
    type: string;
  }

  /** ScanresultPackageFixes. */
  export interface ScanresultPackageFixes {
    /** Advice on how to solve this vulnerability. */
    corrective_action: string;
    /** Description of the vulnerability. */
    description: string;
    /** The version of this package that contains the fix for this vulnerability. */
    fix_version: string;
    /** The version of this package that was found installed at scan time. */
    installed_version: string;
    /** The name of the package. */
    package_name: string;
  }

  /** ScanresultSecurityNotice. */
  export interface ScanresultSecurityNotice {
    /** Further information about this security notice. */
    notice: string;
    /** True if this security notice has been exempted by user policy, and false otherwise. */
    notice_exempt: boolean;
    /** The ID for this security notice. */
    notice_id: string;
    /** Summary of information about the security vulnerabilities fixed by this security notice. */
    summary: string;
    /** Package updates that contain fixes for this vulnerability. */
    vulnerable_packages: ScanresultPackageFixes[];
  }
}

export = VulnerabilityAdvisorV4;
